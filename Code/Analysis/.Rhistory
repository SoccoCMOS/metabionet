rowSums(agg_occur[,range])
}))
colnames(group_occur)=lapply(groups$group_id,function(x) paste("G_",x,sep=""))
group_occur[,c("key","verbatimScientificName","broad")]=agg_occur[,c("key","verbatimScientificName","broad")]
cat("Common backbone of taxa shared accross observation points at ",levels[lev]," scale \n")
taxa_coverage=rowSums(group_occur[,4:dim(group_occur)[2]]>0)/length(pt_names)
hist(taxa_coverage,main = "Histogram of taxa coverage at level ",levels[lev])
backbone=group_occur[which(taxa_coverage>=th),c("key","verbatimScientificName","broad")]
cat("Common taxa: ",dim(backbone)[1],"\n")
summary(backbone$broad)
}
lev
cols=levels[1:(1+lev)]
cols
groups=aggregate(fac,by=as.list(fac[,c(cols)]),FUN = list)[,c('LECA_id',cols)]
groups$group_id=1:dim(groups)[1]
View(groups)
cols
as.list(fac[,c(cols)]
)
groups=aggregate(fac,by=list(fac[,c(cols)]),FUN = list)[,c('LECA_id',cols)]
groups$group_id=1:dim(groups)[1]
View(groups)
group_occur=data.frame(apply(groups,1,function(x){
#print(x)
range=as.vector(x$LECA_id)
#print(range)
rowSums(agg_occur[,range])
}))
colnames(group_occur)=lapply(groups$group_id,function(x) paste("G_",x,sep=""))
group_occur[,c("key","verbatimScientificName","broad")]=agg_occur[,c("key","verbatimScientificName","broad")]
cat("Common backbone of taxa shared accross observation points at ",levels[lev]," scale \n")
levels[lev+1]
cat("Common backbone of taxa shared accross observation points at ",levels[lev+1]," scale \n")
taxa_coverage=rowSums(group_occur[,4:dim(group_occur)[2]]>0)/length(pt_names)
hist(taxa_coverage,main = "Histogram of taxa coverage at level ",levels[lev])
backbone=group_occur[which(taxa_coverage>=th),c("key","verbatimScientificName","broad")]
cat("Common taxa: ",dim(backbone)[1],"\n")
summary(backbone$broad)
taxa_coverage=rowSums(group_occur[,4:dim(group_occur)[2]]>0)/length(pt_names)
View(group_occur)
new_cols=lapply(groups$group_id,function(x) paste("G_",x,sep=""))
colnames(group_occur)=new_cols
group_occur[,c("key","verbatimScientificName","broad")]=agg_occur[,c("key","verbatimScientificName","broad")]
taxa_coverage=rowSums(group_occur[,new_cols]>0)/length(pt_names)
new_cols
View(group_occur)
as.vector(new_cols)
unlist(new_cols)
taxa_coverage=rowSums(group_occur[,unlist(new_cols)]>0)/length(pt_names)
hist(taxa_coverage,main = "Histogram of taxa coverage at level ",levels[lev])
backbone=group_occur[which(taxa_coverage>=th),c("key","verbatimScientificName","broad")]
cat("Common taxa: ",dim(backbone)[1],"\n")
summary(backbone$broad)
hist(taxa_coverage,main = "Histogram of taxa coverage at level ",main=levels[lev+1])
hist(taxa_coverage,main = paste("Histogram of taxa coverage at level ",levels[lev+1]))
backbone=group_occur[which(taxa_coverage>=th),c("key","verbatimScientificName","broad")]
cat("Common taxa: ",dim(backbone)[1],"\n")
summary(backbone$broad)
taxa_coverage=rowSums(group_occur[,unlist(new_cols)]>0)/length(new_cols)
hist(taxa_coverage,main = paste("Histogram of taxa coverage at level: ",levels[lev+1]))
backbone=group_occur[which(taxa_coverage>=th),c("key","verbatimScientificName","broad")]
cat("Common taxa: ",dim(backbone)[1],"\n")
summary(backbone$broad)
th=1
for (lev in 0:3){
cols=levels[1:(1+lev)]
### Aggregate occurences ###
groups=aggregate(fac,by=list(fac[,c(cols)]),FUN = list)[,c('LECA_id',cols)]
groups$group_id=1:dim(groups)[1]
group_occur=data.frame(apply(groups,1,function(x){
#print(x)
range=as.vector(x$LECA_id)
#print(range)
rowSums(agg_occur[,range])
}))
new_cols=lapply(groups$group_id,function(x) paste("G_",x,sep=""))
colnames(group_occur)=new_cols
group_occur[,c("key","verbatimScientificName","broad")]=agg_occur[,c("key","verbatimScientificName","broad")]
cat("Common backbone of taxa shared accross observation points at ",levels[lev+1]," scale \n")
taxa_coverage=rowSums(group_occur[,unlist(new_cols)]>0)/length(new_cols)
hist(taxa_coverage,main = paste("Histogram of taxa coverage at level: ",levels[lev+1]))
backbone=group_occur[which(taxa_coverage>=th),c("key","verbatimScientificName","broad")]
cat("Common taxa: ",dim(backbone)[1],"\n")
summary(backbone$broad)
}
lev
cols
list(fac[,c(cols)]
)
by=list(fac[,c(cols)]
)
View(by)
if(length(cols)==1)
by=list(fac[,c(cols)])
else
by=as.list(fac[,c(cols)])
if(length(cols)==1) by=list(fac[,c(cols)])
else by=as.list(fac[,c(cols)])
if(length(cols)==1){
by=list(fac[,c(cols)])
}else{
by=as.list(fac[,c(cols)])
}
View(by)
groups=aggregate(fac,by=by,FUN = list)[,c('LECA_id',cols)]
for (lev in 0:3){
cols=levels[1:(1+lev)]
### Aggregate occurences ###
if(length(cols)==1){
by=list(fac[,c(cols)])
}else{
by=as.list(fac[,c(cols)])
}
groups=aggregate(fac,by=by,FUN = list)[,c('LECA_id',cols)]
groups$group_id=1:dim(groups)[1]
group_occur=data.frame(apply(groups,1,function(x){
#print(x)
range=as.vector(x$LECA_id)
#print(range)
rowSums(agg_occur[,range])
}))
new_cols=lapply(groups$group_id,function(x) paste("G_",x,sep=""))
colnames(group_occur)=new_cols
group_occur[,c("key","verbatimScientificName","broad")]=agg_occur[,c("key","verbatimScientificName","broad")]
cat("Common backbone of taxa shared accross observation points at ",levels[lev+1]," scale \n")
taxa_coverage=rowSums(group_occur[,unlist(new_cols)]>0)/length(new_cols)
hist(taxa_coverage,main = paste("Histogram of taxa coverage at level: ",levels[lev+1]))
backbone=group_occur[which(taxa_coverage>=th),c("key","verbatimScientificName","broad")]
cat("Common taxa: ",dim(backbone)[1],"\n")
summary(backbone$broad)
}
lev
groups=aggregate(fac,by=by,FUN = list)[,c('LECA_id',cols)]
groups$group_id=1:dim(groups)[1]
group_occur=data.frame(apply(groups,1,function(x){
#print(x)
range=as.vector(x$LECA_id)
#print(range)
rowSums(agg_occur[,range])
}))
new_cols=lapply(groups$group_id,function(x) paste("G_",x,sep=""))
colnames(group_occur)=new_cols
group_occur[,c("key","verbatimScientificName","broad")]=agg_occur[,c("key","verbatimScientificName","broad")]
View(groups)
View(groups)
group_occur=data.frame(apply(groups,1,function(x){
#print(x)
range=as.vector(x$LECA_id)
#print(range)
if(length(range)>1){
rowSums(agg_occur[,range])
}else{
agg_occur[,range]
}
}))
View(group_occur)
th=1
for (lev in 0:3){
cols=levels[1:(1+lev)]
### Aggregate occurences ###
if(length(cols)==1){
by=list(fac[,c(cols)])
}else{
by=as.list(fac[,c(cols)])
}
groups=aggregate(fac,by=by,FUN = list)[,c('LECA_id',cols)]
groups$group_id=1:dim(groups)[1]
group_occur=data.frame(apply(groups,1,function(x){
#print(x)
range=as.vector(x$LECA_id)
#print(range)
if(length(range)>1){
rowSums(agg_occur[,range])
}else{
agg_occur[,range]
}
}))
new_cols=lapply(groups$group_id,function(x) paste("G_",x,sep=""))
colnames(group_occur)=new_cols
group_occur[,c("key","verbatimScientificName","broad")]=agg_occur[,c("key","verbatimScientificName","broad")]
cat("Common backbone of taxa shared accross observation points at ",levels[lev+1]," scale \n")
taxa_coverage=rowSums(group_occur[,unlist(new_cols)]>0)/length(new_cols)
hist(taxa_coverage,main = paste("Histogram of taxa coverage at level: ",levels[lev+1]))
backbone=group_occur[which(taxa_coverage>=th),c("key","verbatimScientificName","broad")]
cat("Common taxa: ",dim(backbone)[1],"\n")
summary(backbone$broad)
}
dim(backbone)[1]/dim(group_occur)[1]
cat("Common taxa: ",100*dim(backbone)[1]/dim(group_occur)[1],"\n")
foodweb=bise_metaweb$clone()
foodweb$subgraph_edges(eids = foodweb$get_interactions_type(typ = "eats"),delete_taxa = T)
foodweb=bise_metaweb$subgraph_edges(eids = bise_metaweb$get_interactions_type(typ = "eats"),delete_taxa = T)
parasitweb=bise_metaweb$subgraph_edges(eids = bise_metaweb$get_interactions_type(typ = "parasiteOf"),delete_taxa = T)
foodweb
plot(foodweb)
parasitweb=bise_metaweb$subgraph_edges(eids = bise_metaweb$get_interactions_type(typ = "parasiteOf"),delete_taxa = T)
plot(parasitweb)
specweb=bise_metaweb$clone()
specweb$graph=specweb$get_taxa_rank(ranks = c("SPECIES"))
specweb$print()
specweb$get_taxa_rank(ranks = c("SPECIES")
)
specweb=bise_metaweb$clone()
sublist_taxa_keys =specweb$get_taxa_rank(ranks = c("SPECIES"))
sublist_taxa_keys =specweb$get_taxa_rank(ranks = c("SPECIES"))$name
View(sublist_taxa_keys)
specweb$graph=specweb$project_metanetwork(sublist_taxa_keys =specweb$get_taxa_rank(ranks = c("SPECIES"))$name,net_name = "speciesweb")
View(sublist_taxa_keys)
sublist_taxa_keys =unlist(specweb$get_taxa_rank(ranks = c("SPECIES"))$name)
specweb=bise_metaweb$clone()
specweb$graph=specweb$project_metanetwork(sublist_taxa_keys =unlist(specweb$get_taxa_rank(ranks = c("SPECIES"))$name),net_name = "speciesweb")
specgenweb=bise_metaweb$clone()
specgenweb$graph=specgenweb$project_metanetwork(sublist_taxa_keys =unlist(specgenweb$get_taxa_rank(ranks = c("SPECIES","GENUS"))$name),net_name = "species_genus_web")
specgenweb=bise_metaweb$clone()
specgenweb$graph=specgenweb$project_metanetwork(sublist_taxa_keys =unlist(specgenweb$get_taxa_rank(ranks = c("GENUS"))$name),net_name = "species_genus_web")
prob=0.5
bise_metaweb$graph=bise_metaweb$subgraph_edges(bise_metaweb$get_interactions_strength(th = min_prob))
min_prob=0.5
bise_metaweb$graph=bise_metaweb$subgraph_edges(bise_metaweb$get_interactions_strength(th = min_prob))
bise_metaweb$print()
taxa_groups=read.csv2("../../Applications/BISE/Trophic_groups/SBM/clusters.csv.txt")[,c("Id","Cluster")]
View(taxa_groups)
View(taxa_groups)
sbm_groups=read.csv2("../../Applications/BISE/Trophic_groups/SBM/clusters.csv.txt")[,c("Id","Cluster")]
trophic_groups=subset(taxa_groups,taxa_groups$Id%in%motu_covered)
sbm_groups=read.csv2("../../Applications/BISE/Trophic_groups/SBM/clusters.csv.txt")[,c("Id","Cluster")]
trophic_groups=subset(sbm_groups,sbm_groups$Id%in%motu_covered)
View(trophic_groups)
trophic_groups=subset(sbm_groups,sbm_groups$Id %in% motu_covered$key)
View(trophic_groups)
trophic_groups=subset(sbm_groups,!(sbm_groups$Id %in% motu_covered$key))
View(trophic_groups)
trophic_groups=subset(sbm_groups,!(motu_covered$key %in% sbm_groups$Id ))
View(trophic_groups)
bise_weighted_adjacency=as_adjacency_matrix(bise_metaweb,
attr = "weight", edges = FALSE, names = TRUE)
#### R6Class that represents a metaweb of interactions ######
MetaWeb <- R6Class("MetaWeb", list(
### Attributes ###
webname = "Metaweb0",
nodes = NA,  ### List of objects of type Taxon representing taxa identified
graph = NA, ### Actual interaction network: igraph object
### Object functions ###
initialize = function(mwebname, taxa, edge_list, edge_metadata=NA) {
self$webname <- mwebname
self$nodes <- taxa
### Create empty graph ###
self$graph = graph.empty()%>%
### Add vertices ###
add_vertices(nv=length(taxa))%>%
### Add vertex attributes ###
set_vertex_attr("name",value=lapply(taxa,FUN=function(x) x$gbif_id))%>%
set_vertex_attr("scName",value=lapply(taxa,FUN=function(x) x$label))%>%
set_vertex_attr("rank",value=lapply(taxa,FUN=function(x) as.character(x$rank)))%>%
set_vertex_attr("broad",value=lapply(taxa,FUN=function(x) x$broadtype))%>%
### Add edges and their attributes ###
add_edges(edges=as.vector(t(as.matrix(edge_list[,c("resource","consumer")]))),
attr = list(type=as.character(edge_metadata[,"type"]),weight=as.double(edge_metadata[,"cooccur"]))
)
},
print = function(){
cat("Metaweb: \n")
cat("  Name: ",self$webname, "\n", sep = "")
cat(" Network statistics: \n")
cat(" Number of taxa: ",igraph::vcount(self$graph),"\n", sep = "")
cat(" Number of interactions: ",igraph::ecount(self$graph),"\n", sep = "")
cat(" Connectivity: ",edge_density(self$graph))
invisible(self)
},
### Other functions needed ###
print_network = function(){  ##TODO: add graphical attributes
plot.igraph(graph,label="scName")
},
save_network = function(file_name,fmt= c("edgelist", "pajek", "ncol", "lgl",
"graphml", "dimacs", "gml", "dot", "leda")){
write_graph(graph=self$graph, file=file_name, format=fmt)
},
### Add attributes to vertices ###
add_vertex_atts=function(att_name,idx,atts){
self$graph=set_vertex_attr(graph=self$graph,name=att_name,index=idx,value=atts)
},
### Network projection functions => returns subnetwork of type igraph ###
project_metanetwork=function(sublist_taxa_keys,net_name){  ### Project to subset of taxa provided in a list of keys in string format
subnetwork=induced_subgraph(self$graph,vids=sublist_taxa_keys,impl="create_from_scratch")
cat("Projected trophic web: \n")
cat("  Name: ",net_name, "\n", sep = "")
cat(" Network statistics: \n")
cat(" Number of taxa: ",vcount(subnetwork),"\n", sep = "")
cat(" Number of interactions: ",ecount(subnetwork),"\n", sep = "")
cat(" Connectivity: ",edge_density(subnetwork),"\n")
return(subnetwork)
},
get_taxa_broad=function(broad_list){ ### Returns list of taxa of a certain broad type
vbroad=V(self$graph)[broad%in%broad_list]
return(vbroad)
},
get_taxa_rank=function(ranks){ ### Filter taxa of certain rank (provide ranks to keep)
vrank=V(self$graph)[rank%in%ranks]
return(vrank)
},
get_interactions_type=function(typ=c("eats","parasiteOf")){ ### Filter to a certain type of interactions
etype=E(self$graph)[type%in%typ]
return(etype)
},
get_interactions_strength=function(th=0){ ### Filter to a certain type of interactions
estrength=E(self$graph)[weight>th]
return(estrength)
},
subgraph_edges=function(eids,delete_taxa=F){
return(subgraph.edges(self$graph, eids, delete.vertices = delete_taxa))
},
get_adjacency_matrix(edge_att="weight",edges){
return(as_adjacency_matrix(self$graph,attr = edge_att,edges = edges))
}
))
#### R6Class that represents a metaweb of interactions ######
MetaWeb <- R6Class("MetaWeb", list(
### Attributes ###
webname = "Metaweb0",
nodes = NA,  ### List of objects of type Taxon representing taxa identified
graph = NA, ### Actual interaction network: igraph object
### Object functions ###
initialize = function(mwebname, taxa, edge_list, edge_metadata=NA) {
self$webname <- mwebname
self$nodes <- taxa
### Create empty graph ###
self$graph = graph.empty()%>%
### Add vertices ###
add_vertices(nv=length(taxa))%>%
### Add vertex attributes ###
set_vertex_attr("name",value=lapply(taxa,FUN=function(x) x$gbif_id))%>%
set_vertex_attr("scName",value=lapply(taxa,FUN=function(x) x$label))%>%
set_vertex_attr("rank",value=lapply(taxa,FUN=function(x) as.character(x$rank)))%>%
set_vertex_attr("broad",value=lapply(taxa,FUN=function(x) x$broadtype))%>%
### Add edges and their attributes ###
add_edges(edges=as.vector(t(as.matrix(edge_list[,c("resource","consumer")]))),
attr = list(type=as.character(edge_metadata[,"type"]),weight=as.double(edge_metadata[,"cooccur"]))
)
},
print = function(){
cat("Metaweb: \n")
cat("  Name: ",self$webname, "\n", sep = "")
cat(" Network statistics: \n")
cat(" Number of taxa: ",igraph::vcount(self$graph),"\n", sep = "")
cat(" Number of interactions: ",igraph::ecount(self$graph),"\n", sep = "")
cat(" Connectivity: ",edge_density(self$graph))
invisible(self)
},
### Other functions needed ###
print_network = function(){  ##TODO: add graphical attributes
plot.igraph(graph,label="scName")
},
save_network = function(file_name,fmt= c("edgelist", "pajek", "ncol", "lgl",
"graphml", "dimacs", "gml", "dot", "leda")){
write_graph(graph=self$graph, file=file_name, format=fmt)
},
### Add attributes to vertices ###
add_vertex_atts=function(att_name,idx,atts){
self$graph=set_vertex_attr(graph=self$graph,name=att_name,index=idx,value=atts)
},
### Network projection functions => returns subnetwork of type igraph ###
project_metanetwork=function(sublist_taxa_keys,net_name){  ### Project to subset of taxa provided in a list of keys in string format
subnetwork=induced_subgraph(self$graph,vids=sublist_taxa_keys,impl="create_from_scratch")
cat("Projected trophic web: \n")
cat("  Name: ",net_name, "\n", sep = "")
cat(" Network statistics: \n")
cat(" Number of taxa: ",vcount(subnetwork),"\n", sep = "")
cat(" Number of interactions: ",ecount(subnetwork),"\n", sep = "")
cat(" Connectivity: ",edge_density(subnetwork),"\n")
return(subnetwork)
},
get_taxa_broad=function(broad_list){ ### Returns list of taxa of a certain broad type
vbroad=V(self$graph)[broad%in%broad_list]
return(vbroad)
},
get_taxa_rank=function(ranks){ ### Filter taxa of certain rank (provide ranks to keep)
vrank=V(self$graph)[rank%in%ranks]
return(vrank)
},
get_interactions_type=function(typ=c("eats","parasiteOf")){ ### Filter to a certain type of interactions
etype=E(self$graph)[type%in%typ]
return(etype)
},
get_interactions_strength=function(th=0){ ### Filter to a certain type of interactions
estrength=E(self$graph)[weight>th]
return(estrength)
},
subgraph_edges=function(eids,delete_taxa=F){
return(subgraph.edges(self$graph, eids, delete.vertices = delete_taxa))
},
get_adjacency_matrix=function(edge_att="weight",edges){
return(as_adjacency_matrix(self$graph,attr = edge_att,edges = edges))
}
))
bise_metaweb=MetaWeb$new(mwebname="BISE", taxa=taxa_nodes, edge_list=sub_edges[,c("resource","consumer")], edge_metadata=sub_edges[,setdiff(colnames(sub_edges),c("resource","consumer"))])
bise_metaweb$print()
min_prob=0.5
bise_metaweb$graph=bise_metaweb$subgraph_edges(bise_metaweb$get_interactions_strength(th = min_prob))
bise_metaweb$print()
weighted_adj=bise_weighted_adjacency=bise_metaweb$get_adjacency_matrix("weight",F)
View(weighted_adj)
weighted_adj=bise_metaweb$get_adjacency_matrix("weight",F)
bin_adj=bise_metaweb$get_adjacency_matrix("weight",T)
View(weighted_adj)
View(bin_adj)
View(weighted_adj)
bin_adj=bise_metaweb$get_adjacency_matrix("",T)
View(bin_adj)
#### R6Class that represents a metaweb of interactions ######
MetaWeb <- R6Class("MetaWeb", list(
### Attributes ###
webname = "Metaweb0",
nodes = NA,  ### List of objects of type Taxon representing taxa identified
graph = NA, ### Actual interaction network: igraph object
### Object functions ###
initialize = function(mwebname, taxa, edge_list, edge_metadata=NA) {
self$webname <- mwebname
self$nodes <- taxa
### Create empty graph ###
self$graph = graph.empty()%>%
### Add vertices ###
add_vertices(nv=length(taxa))%>%
### Add vertex attributes ###
set_vertex_attr("name",value=lapply(taxa,FUN=function(x) x$gbif_id))%>%
set_vertex_attr("scName",value=lapply(taxa,FUN=function(x) x$label))%>%
set_vertex_attr("rank",value=lapply(taxa,FUN=function(x) as.character(x$rank)))%>%
set_vertex_attr("broad",value=lapply(taxa,FUN=function(x) x$broadtype))%>%
### Add edges and their attributes ###
add_edges(edges=as.vector(t(as.matrix(edge_list[,c("resource","consumer")]))),
attr = list(type=as.character(edge_metadata[,"type"]),weight=as.double(edge_metadata[,"cooccur"]))
)
},
print = function(){
cat("Metaweb: \n")
cat("  Name: ",self$webname, "\n", sep = "")
cat(" Network statistics: \n")
cat(" Number of taxa: ",igraph::vcount(self$graph),"\n", sep = "")
cat(" Number of interactions: ",igraph::ecount(self$graph),"\n", sep = "")
cat(" Connectivity: ",edge_density(self$graph))
invisible(self)
},
### Other functions needed ###
print_network = function(){  ##TODO: add graphical attributes
plot.igraph(graph,label="scName")
},
save_network = function(file_name,fmt= c("edgelist", "pajek", "ncol", "lgl",
"graphml", "dimacs", "gml", "dot", "leda")){
write_graph(graph=self$graph, file=file_name, format=fmt)
},
### Add attributes to vertices ###
add_vertex_atts=function(att_name,idx,atts){
self$graph=set_vertex_attr(graph=self$graph,name=att_name,index=idx,value=atts)
},
### Network projection functions => returns subnetwork of type igraph ###
project_metanetwork=function(sublist_taxa_keys,net_name){  ### Project to subset of taxa provided in a list of keys in string format
subnetwork=induced_subgraph(self$graph,vids=sublist_taxa_keys,impl="create_from_scratch")
cat("Projected trophic web: \n")
cat("  Name: ",net_name, "\n", sep = "")
cat(" Network statistics: \n")
cat(" Number of taxa: ",vcount(subnetwork),"\n", sep = "")
cat(" Number of interactions: ",ecount(subnetwork),"\n", sep = "")
cat(" Connectivity: ",edge_density(subnetwork),"\n")
return(subnetwork)
},
get_taxa_broad=function(broad_list){ ### Returns list of taxa of a certain broad type
vbroad=V(self$graph)[broad%in%broad_list]
return(vbroad)
},
get_taxa_rank=function(ranks){ ### Filter taxa of certain rank (provide ranks to keep)
vrank=V(self$graph)[rank%in%ranks]
return(vrank)
},
get_interactions_type=function(typ=c("eats","parasiteOf")){ ### Filter to a certain type of interactions
etype=E(self$graph)[type%in%typ]
return(etype)
},
get_interactions_strength=function(th=0){ ### Filter to a certain type of interactions
estrength=E(self$graph)[weight>th]
return(estrength)
},
subgraph_edges=function(eids,delete_taxa=F){
return(subgraph.edges(self$graph, eids, delete.vertices = delete_taxa))
},
get_adjacency_matrix=function(edge_att="weight",edges=T){
return(as_adjacency_matrix(self$graph,attr = edge_att,edges = edges,sparse = F))
}
))
bise_metaweb=MetaWeb$new(mwebname="BISE", taxa=taxa_nodes, edge_list=sub_edges[,c("resource","consumer")], edge_metadata=sub_edges[,setdiff(colnames(sub_edges),c("resource","consumer"))])
bise_metaweb$print()
weighted_adj=bise_metaweb$get_adjacency_matrix("weight",F)
View(weighted_adj)
weighted_adj[1,1]
weighted_adj[1,10]
weighted_adj[1,100]
weighted_adj=data.frame(bise_metaweb$get_adjacency_matrix("weight",F))
bin_adj=data.frame(bise_metaweb$get_adjacency_matrix("",T))
View(bin_adj)
which(bin_adj>0)
bin_adj[which(bin_adj>0)]
bin_adj[which(bin_adj>0)]
bin_adj[which(bin_adj>0),]
colnames(weighted_adj)
V(bise_metaweb$graph)$name
unlist(V(bise_metaweb$graph)$name)
colnames(weighted_adj)
colnames(weighted_adj)=unlist(V(bise_metaweb$graph)$name)
rownames(weighted_adj)=unlist(V(bise_metaweb$graph)$name)
nodelist=data.frame(keys=unlist(V(bise_metaweb$graph)$name))
write.csv2(weighted_adj,"../../Applications/BISE/weighted_adjacency_matrix.csv")
write.csv2(bin_adj,"../../Applications/BISE/binary_adjacency_matrix.csv")
write.csv2(nodelist,"../../Applications/BISE/node_list.csv")
