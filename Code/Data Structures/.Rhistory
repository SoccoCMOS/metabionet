main=paste("Abiotic niche",sim_names[cpt]),
xlab="Environment",ylab="Density",cex=.05,
col=palette(distinctColorPalette(length(nopt))))
##Interactions##
comp=sim_params$comp_inter[[cpt]]
fac=sim_params$fac_inter[[cpt]]
if(length(fac)==1) fac=matrix(fac,length(nopt),length(nopt))
if(length(comp)==1) comp=matrix(comp,length(nopt),length(nopt))
inter_mat=fac-comp
corrplot(-comp,title=paste("Negative effects matrix: ",sim_names[cpt]),method="color",mar=c(0,0,1,0))
corrplot(fac,title=paste("Positive effects matrix: ",sim_names[cpt]),method="color",mar=c(0,0,1,0))
corrplot(inter_mat,title=paste("Interaction matrix: ",sim_names[cpt]),method="color",mar=c(0,0,1,0))
###Simulation results ###
alphadiv=r$alpha
prevs=colSums(r$occur>0) ##species prevalence
hist(prevs,main=paste("Species prevalence: ",sim_names[cpt]))
boxplot.matrix(alphadiv,main=paste("Alpha diversity evolution over epochs: ",sim_names[cpt]),xlab="Simulation epochs",ylab="Average alpha diversity")
cpt=cpt+1
}
dev.off()
for (cpt in 1:length(sim_data)){
r=sim_data[[cpt]]
run=names(sim_data)[[cpt]]
n_opt=sim_params$niche_optima[[cpt]]
###Save distribution data
d=data.frame(env=r$data[,ncol(r$data)],r$occur)
write.csv2(d,
file=paste("SimFiles/round_",round,"/dataset/",run,"_dist.csv",sep=""),
row.names=F)
### Save interaction matrix
comp=sim_params$comp_inter[[cpt]]
fac=sim_params$fac_inter[[cpt]]
if(length(fac)==1) fac=matrix(fac,length(n_opt),length(n_opt))
if(length(comp)==1) comp=matrix(comp,length(n_opt),length(n_opt))
inter_mat=fac-comp
int=data.frame(inter_mat)
rownames(int)=colnames(int)
write.csv2(int,
file=paste("SimFiles/round_",round,"/dataset/",run,"_int.csv",sep=""),
row.names=T)
### Save niche optima
nop=data.frame(niche_opt=n_opt)
rownames(nop)=rownames(int)
write.csv2(nop,
file=paste("SimFiles/round_",round,"/dataset/",run,"_nicheoptima.csv",sep=""),
row.names=T)
}
for (r in 1:nruns){
rdata=sim_data[[r]]
d=data.frame(env=rdata$data[,ncol(rdata$data)],rdata$occur)
fac_pairs=t(matrix(c(c(1,2),c(3,5),c(4,7),c(6,10),c(8,9)),nrow=2,ncol=5))
for (fp in 1:dim(fac_pairs)[1]){
xn=as.integer(fac_pairs[fp,1])
yn=as.integer(fac_pairs[fp,2])
nopt=nop[c(xn,yn),]
occur=d[,c(xn+1,yn+1)]
jc=jaccard_idx(occur)
env=d[,1]
p<-plot_codist(nopt,occur,env,20,xn,yn,titre = paste("jaccard = ",jc," run ",sim_names[r]))
#p%>%offline(p,open_browser = T)
#plotly_IMAGE(p, format = "png", out_file = paste("distplot/fac/dist",xn,yn,".png",sep="_"))
}
}
round=1006
sim_names=c(
"AsymSparseSp20"
)
saveRDS(sim_names,paste("simnames_round_",round,".rds",sep=""))
#sim_names=lapply(1:nruns,function(x) paste("Sim_",x))
set.seed(1023)
nbspec=20
nruns=1
commsize=40
intpos=as.matrix(read.csv2("FacSparseSp20.csv",header = T,sep=";",row.names = 1))
intneg=as.matrix(read.csv2("CompSparseSp20.csv",header = T,sep=";",row.names = 1))
View(intpos)
intpos=as.matrix(read.csv2("FacSp20.csv",header = T,sep=";",row.names = 1))
intpos=as.matrix(read.csv2("FacSp20",header = T,sep=";",row.names = 1))
intneg=as.matrix(read.csv2("CompSp20",header = T,sep=";",row.names = 1))
View(intpos)
View(intneg)
lcomp_inter=list(
as.matrix(intneg!=0)
)
saveRDS(lcomp_inter,paste("simcomp_inter"))
lfac_inter=list(
as.matrix(intpos!=0)
)
saveRDS(lfac_inter,paste("simfac_inter"))
lniche_opt=list(
##Mix
seq(2, 98, length.out = nbspec)
)
saveRDS(lniche_opt,paste("simniche_opt"))
int_mat=intpos+intneg
View(int_mat)
int_mat=intpos-intneg
View(int_mat)
write.csv2(int_mat,file="posneg_sparse_sp20.csv")
intposneg=as.matrix(read.csv2("posneg_sparse_sp20.csv",header = T,sep=";",row.names = 1))
intposneg=as.matrix(read.csv2("posneg_sparse_sp20.csv",header = T,sep=";",row.names = 1))
View(intposneg)
lcomp_inter=list(
as.matrix(intposneg<0)
)
saveRDS(lcomp_inter,paste("simcomp_inter"))
lfac_inter=list(
as.matrix(intposneg>0)
)
saveRDS(lfac_inter,paste("simfac_inter"))
lniche_opt=list(
##Mix
seq(2, 98, length.out = nbspec)
)
saveRDS(lniche_opt,paste("simniche_opt"))
sim_params =list(
niche_optima = lniche_opt,
type         = list("PRIOR")[rep(1, nruns)],
comp_inter   = lcomp_inter,
fac_inter    = lfac_inter,
beta_comp    = list(5),
beta_fac     = list(5),
beta_env     = rep(list(1), each = nruns),
beta_abun    = rep(list(0), each = nruns),
K            = list(commsize)[rep(1,1)],
interaction  = list("both")[rep(1, 1)],
intra_sp_com = rep(list(0), nruns)
)
saveRDS(sim_params,paste("simcom_params_",round,sep=""))
sim_data = sim_params %>%
pmap(simulate_community)
simulate_community <- function(
########## Intialize all simulation parameters ###############
##Random uniform sampling in the environmental gradient
env = runif(1000, 0, 100),
##Spread the #species' optima over the gradient <-- here there is a possibility to manage the overlap
niche_optima  = seq(2, 98, 20), niche_breadth = 20,
type = "original", comp_inter = NA, fac_inter = NA,
##Relative weights of the different assembly processes
beta_env = 1, beta_comp = 1, beta_fac = 1, beta_abun = 1,
##Size of the problem: years, number of individuals
years = 20, K = 40,
interaction = "facilitation", #?????
##Relative importance of intra vs inter specific competition
intra_sp_com  = 0
) {
########## Pass simulation parameters to sim function ###############
sim_com <- function( ##Simulates a single community
env, niche_breadth, niche_optima, type, comp_inter, fac_inter, beta_env,
beta_comp, beta_fac, beta_abun, years, K, interaction,intra_sp_com
) {
##Number of species
n_sp = length(niche_optima)
if (type == "original") {
##Virtualcomm original competition definition
##= summed traits distribution overlap (figure 1 paper Munkenmuller & Gallien 2015)
species_comp <- outer(
niche_optima,
niche_optima,
function(x, y) 2 * pnorm(-abs((x - y)) / 2, sd = niche_breadth)
)
##Returns an (n_sp x n_sp) matrix such that each cell i,j gives the trait overlap of species i and j
##It is by definition symmetric
##Diagnoals either kept to 1 by default because of full overlap or set to the parameter value
diag(species_comp) <- intra_sp_com
##Same goes for facilitation
##Asymmetric competition
if(interaction=="asymmetric"){
species_comp <- outer(
niche_optima,
niche_optima,
function(x, y) {
sign <- ifelse(x > y, 1, 0)
overlap <- 2 * pnorm(-abs((x - y)) / 2, sd = niche_breadth)
sign * overlap
}
)
species_fac <- species_comp
}
} else { ##Type= "PRIOR"
##Given matrices of competition and facilitation
if (length(comp_inter) == 1) comp_inter = matrix(comp_inter, n_sp, n_sp) ##If not NA, value broadcast
if (length(fac_inter)  == 1) fac_inter  = matrix(fac_inter, n_sp, n_sp)
species_comp <- as.matrix(comp_inter) ##species_niche_overlap_sym=competition matrix
species_fac <- as.matrix(fac_inter) ##species fac sym = facilitation matrix
}
#print("Ok")
#print(comp_inter)
#print(species_comp)
#print("Ok")
diag(species_comp) <- intra_sp_com
diag(species_fac) <- 0
#print("Ok")
###log Penv => abiotic filter for each species in each environment value
log_p_env <- sapply(
niche_optima, dnorm, mean = env, sd = niche_breadth, log = TRUE
)
###Normalized density for each species in each environment value
log_p_env <- log_p_env  - log(dnorm(0) / 10)
### Random initialization of the community with K individuals from the n_spec species pool
## Init only one community
community <- factor(
x      = sample(seq_along(niche_optima), K, replace = TRUE),
levels = seq_len(n_sp)
)
### Transform into abundance table
abund <- table(community)
abunds=data.frame(matrix(0,0,n_sp))
abunds[nrow(abunds)+1,]<-abund
for (j in seq_len(years)) { ##Timesteps of community dynamics
##At each step, test individual by individual among K
for (k in seq_len(K)) {
##each individual of community identified by its species id
# if(length(dim(species_fac))==1){
#   print(n_sp," ",interaction)
# }
# if(length(community)<=1){
#   print("check community")
# }
f_comp <- 1 - colSums(species_fac[community,]) / K
##average of the facilitation level of each species to this individual (includes species that are not           ##present though)
p_comp <- 1 - colSums(species_comp[community,]) / K
##average of the competition effect of   each species to this individual (includes species that are not         ##present though, no abundance weighted effect)
if (interaction == "positive") { ##If we have a facilitation filter
p_all <- exp(     ###Wic from paper
beta_env * log_p_env - beta_fac * log(f_comp) +
log(1 + beta_abun * abund)  ##What is 1 here ? => to avoind undefinition (baseline abundance)
)
} else if(interaction == "negative") {  ##If we only have a competition filter
p_all <- exp(
beta_env * log_p_env + beta_comp * log(p_comp) +
log(1 + beta_abun * abund)
)
}
else if(interaction == "both") { ##both competition adn facilitation
p_all <- exp(  ##For each species the probability for her to take this spot
beta_env * log_p_env + beta_comp * log(p_comp) - beta_fac *
log(f_comp) + log(1 + beta_abun * abund)
)
}
else{
p_all <- exp(  ## Just the environmental filtering => equivalent to None interaction
beta_env * log_p_env + log(1 + beta_abun * abund)
)
}
p_all <- ifelse(is.na(p_all), min(p_all, na.rm = TRUE), p_all) ###Replace NA probabilities by the               smallest one
if (all(is.na(p_all)) || identical(min(p_all), max(p_all))) p_all = NULL ###If all NA or all the same           (min=max) then set to NULL
if (any(is.infinite(p_all))) {
community[sample(K, 1)] <- sample(seq_len(n_sp)[p_all == Inf], 1)
} else {
##replace randomly one individual among K (sample(K,1))
community[sample(K, 1)] <- sample(n_sp, 1, prob = p_all) ##sample from multinomial with each mode             (species) its probability
}
###UPDATE abundances
abund <- table(community)
}
###Store at the end of the epoch
abunds[nrow(abunds)+1,]<-abund
}
as.integer(abund) > 0
return(list(data=community,trans=abunds))
}
ans <- mclapply( ##multi-core lapply, simulate communities independently
env, ##Each value of env defines an environmental variable level
sim_com, ##simulate one community per environmental variable => maybe it'd be useful to simulate multiple       communities for the same env (to test for robustness)
niche_breadth, niche_optima, type, comp_inter, fac_inter,
beta_env, beta_comp, beta_fac, beta_abun, years, K, interaction,
intra_sp_com, mc.cores = 1
)
datarun=lapply(ans,function(x) x$data)
abundrun=lapply(ans,function(x) x$trans)
occur <- do.call(rbind, datarun)  ##Stack communities by row
res_run <- cbind(occur, env) ##Concatenate the value of the environment
sp_labs <- paste0(  ##Add species ids
"sp_", gsub(" ", 0, format(seq_along(niche_optima), width = 2))
)
#colnames(res_run) <- c(sp_labs, "env")
#as.data.frame(res_run)
#temp_abund=do.call(rbind, abundrun)
#colnames(temp_abund) <- sp_labs
return(list(data=res_run,hist=abundrun))
}
sim_data = sim_params %>%
pmap(simulate_community)
sim_data = sim_params %>% pmap(simulate_community)
View(simulate_community)
library(parallel)
sim_data = sim_params %>% pmap(simulate_community)
pmap
?pmap
library(purr)
simulate_community
### Load environment ###
library(parallel)
library(purrr)
library(vegan)
library(randomcoloR)
library(corrplot)
library(plotly)
sample_int<-function(n_it,N,ntypes,xvals,yvals,full_overlap=T,seq=F){
if(seq){  ##Sample from sequential pairs
x=sample(1:(N-1),n_it,F)
y=x+1
}else{ ##Sample from all pairs (N(N-1)/2) n_it pairs
idx=matrix(1,N,N)
diag(idx)=0
idx_allowed=which(idx>0)
sel=sample(idx_allowed,n_it)
x=as.integer((sel-1)/N) + 1
y=(sel-1)%%N +1
}
mat=matrix(0,N,N)
start=1
end=1
step=n_it/ntypes
for (i in 1:ntypes){
end=start+step-1
for (k in start:end) {
mat[x[k],y[k]]<-xvals[i]
mat[y[k],x[k]]<-yvals[i]
}
start=end+1
#print(diag(mat))
}
niche_opt=seq(2, 98, length.out = N)
if(full_overlap==T)
for (j in 1:n_it){
niche_opt[y[j]]=niche_opt[x[j]]
}
return(list(int=mat,niche=niche_opt))
}
alpha_div=function(tab){ ##tab with rows=epochs and columns=species
a=diversity(tab,"shannon")
}
Sys.setenv("plotly_username" = "socco")
Sys.setenv("plotly_api_key" = "lGpibVQUSZYwoEzVwnQ3")
plot_dist<-function(nopt,occur,env,nbreadth=20){
y=matrix(0,nrow=length(occur),ncol=2)
y[,1] <- dnorm(env, mean = nopt, sd = nbreadth)
y[,2] <- occur
data=data.frame(y)
colnames(data)=c("Expected","Predicted")
data$env=env
#write.csv2(data,"true_simulated.csv")
p1<-plot_ly(data) %>%
add_trace(x=~env,y=~Expected,name = 'Expected',type = 'scatter',mode = 'markers',connectgaps = TRUE, yaxis = "y") %>%
add_trace(x=~env,y=~Predicted,name = 'Predicted',type = 'scatter',mode = 'markers',connectgaps = TRUE, yaxis = "y2") %>%
layout(title = 'Expected vs predicted distribution',
xaxis = list(title = "Environment"),
yaxis2 = list(side = 'right', overlaying = "y", title = 'Predicted', showgrid = FALSE, zeroline = FALSE))
return(p1)
}
plot_codist<-function(nopt,occur,env,nbreadth,xn,yn,titre="Fundamental niche vs realized counts"){
y=matrix(0,nrow=length(env),ncol=4)
y[,1] <- exp(dnorm(env, mean = nopt[1], sd = nbreadth, log=T) - log(dnorm(0) / 20))
y[,2] <- occur[,1]
y[,3] <- exp(dnorm(env, mean = nopt[2], sd = nbreadth, log=T) - log(dnorm(0) / 20))
y[,4] <- occur[,2]
data=data.frame(y)
colnames(data)=c(paste("Expected_",xn,sep=""),paste("Predicted_",xn,sep=""),
paste("Expected_",yn,sep=""),paste("Predicted_",yn,sep=""))
data$env=env
p1 <- plot_ly() %>%
add_trace(x=data[,"env"],y=data[,paste("Expected_",xn,sep="")],type="scatter",mode="markers",yaxis="y",name=paste("Expected_",xn,sep="")) %>%
add_trace(x=data[,"env"],y=data[,paste("Predicted_",xn,sep="")],type="scatter",mode="markers",yaxis="y2",name=paste("Predicted_",xn,sep="")) %>%
layout(yaxis=list(side="left",title="Fundamental niche"),
yaxis2=list(side="right",overlaying="y",title="Realized counts"),
title=titre,
showlegend=T)
p2 <-plot_ly() %>%
add_trace(x=data[,"env"],y=data[,paste("Expected_",yn,sep="")],type="scatter",mode="markers",yaxis="y",name=paste("Expected_",yn,sep="")) %>%
add_trace(x=data[,"env"],y=data[,paste("Predicted_",yn,sep="")],type="scatter",mode="markers",yaxis="y2",name=paste("Predicted_",yn,sep="")) %>%
layout(yaxis=list(side="left",title="Fundamental niche"),
yaxis2=list(side="right",overlaying="y3",title="Realized counts"),
showlegend=T)
p <- subplot(p1,p2,nrows = 2)
}
jaccard_idx<-function(df,avg=F){
if (avg){
a=as.integer(df[,1]>median(df[,1]))
b=as.integer(df[,2]>median(df[,2]))
}
else{
a=as.integer(df[,1]>0)
b=as.integer(df[,2]>0)
}
tb=table(a,b)
jacc=tb[2,2]/(tb[1,2]+tb[2,1]+tb[2,2])
}
sim_data = sim_params %>% pmap(simulate_community)
sim_data=sim_data %>% set_names(sim_names)
for (r in 1:nruns){
hist=sim_data[[r]]$hist
occur=do.call(rbind,lapply(hist,function(x) x[nrow(x),]))
##Compute alpha_div over iterations
alpha=lapply(hist,alpha_div)
df=do.call(rbind,alpha)
sim_data[[r]]$alpha=df
sim_data[[r]]$occur=occur
sim_data[[r]]$env=sim_data[[r]]$dataata[,ncol(sim_data[[r]]$data)]
}
saveRDS(sim_data,file=paste("comsim_data_",round,sep=""))
pdf("Simulation_output_round_",round,".pdf")
cpt=1
nbreadth=20
x<-seq(0, 100, length=10000)
for (r in sim_data){
###Simulation inputs ###
##Niche optimums##
nopt=lniche_opt[[cpt]]
y <- dnorm(x, mean = nopt, sd = nbreadth)
plot(x,y,
main=paste("Abiotic niche",sim_names[cpt]),
xlab="Environment",ylab="Density",cex=.05,
col=palette(distinctColorPalette(length(nopt))))
##Interactions##
comp=sim_params$comp_inter[[cpt]]
fac=sim_params$fac_inter[[cpt]]
if(length(fac)==1) fac=matrix(fac,length(nopt),length(nopt))
if(length(comp)==1) comp=matrix(comp,length(nopt),length(nopt))
inter_mat=fac-comp
corrplot(-comp,title=paste("Negative effects matrix: ",sim_names[cpt]),method="color",mar=c(0,0,1,0))
corrplot(fac,title=paste("Positive effects matrix: ",sim_names[cpt]),method="color",mar=c(0,0,1,0))
corrplot(inter_mat,title=paste("Interaction matrix: ",sim_names[cpt]),method="color",mar=c(0,0,1,0))
###Simulation results ###
alphadiv=r$alpha
prevs=colSums(r$occur>0) ##species prevalence
hist(prevs,main=paste("Species prevalence: ",sim_names[cpt]))
boxplot.matrix(alphadiv,main=paste("Alpha diversity evolution over epochs: ",sim_names[cpt]),xlab="Simulation epochs",ylab="Average alpha diversity")
cpt=cpt+1
}
dev.off()
for (cpt in 1:length(sim_data)){
r=sim_data[[cpt]]
run=names(sim_data)[[cpt]]
n_opt=sim_params$niche_optima[[cpt]]
###Save distribution data
d=data.frame(env=r$data[,ncol(r$data)],r$occur)
write.csv2(d,
file=paste("SimFiles/round_",round,"/dataset/",run,"_dist.csv",sep=""),
row.names=F)
### Save interaction matrix
comp=sim_params$comp_inter[[cpt]]
fac=sim_params$fac_inter[[cpt]]
if(length(fac)==1) fac=matrix(fac,length(n_opt),length(n_opt))
if(length(comp)==1) comp=matrix(comp,length(n_opt),length(n_opt))
inter_mat=fac-comp
int=data.frame(inter_mat)
rownames(int)=colnames(int)
write.csv2(int,
file=paste("SimFiles/round_",round,"/dataset/",run,"_int.csv",sep=""),
row.names=T)
### Save niche optima
nop=data.frame(niche_opt=n_opt)
rownames(nop)=rownames(int)
write.csv2(nop,
file=paste("SimFiles/round_",round,"/dataset/",run,"_nicheoptima.csv",sep=""),
row.names=T)
}
for (cpt in 1:length(sim_data)){
r=sim_data[[cpt]]
run=names(sim_data)[[cpt]]
n_opt=sim_params$niche_optima[[cpt]]
###Save distribution data
d=data.frame(env=r$data[,ncol(r$data)],r$occur)
write.csv2(d,
file=paste("SimFiles/round_",round,"/dataset/",run,"_dist.csv",sep=""),
row.names=F)
### Save interaction matrix
comp=sim_params$comp_inter[[cpt]]
fac=sim_params$fac_inter[[cpt]]
if(length(fac)==1) fac=matrix(fac,length(n_opt),length(n_opt))
if(length(comp)==1) comp=matrix(comp,length(n_opt),length(n_opt))
inter_mat=fac-comp
int=data.frame(inter_mat)
rownames(int)=colnames(int)
write.csv2(int,
file=paste("SimFiles/round_",round,"/dataset/",run,"_int.csv",sep=""),
row.names=T)
### Save niche optima
nop=data.frame(niche_opt=n_opt)
rownames(nop)=rownames(int)
write.csv2(nop,
file=paste("SimFiles/round_",round,"/dataset/",run,"_nicheoptima.csv",sep=""),
row.names=T)
}
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
library(R6)
#### R6Class that represents a taxon ######
Taxon <- R6Class("Taxon", list(
### Attributes ###
gbif_id = "0",
label = "tax",
### Object functions ###
initialize = function(gbif_id, label = NA) {
self$gbif_id <- gbif_id
self$label <- label
}
),
print = function(...) {
cat("Taxon: \n")
cat("  Name: ", self$label, "\n", sep = "")
cat("  GBIF Key:  ", self$gbif_id, "\n", sep = "")
invisible(self)
}
### Other functions needed ###
)
setwd("D:/Knowledge-based/BISE/meta-bio-net/Bionet_V2/Code/Data Structures")
