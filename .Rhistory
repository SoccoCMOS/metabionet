knitr::opts_knit$set(root.dir = "D:/Knowledge-based/BISE/meta-bio-net/Bionet_V2/")
knitr::opts_knit$set(warning = FALSE, include=FALSE)
workdir="D:/Knowledge-based/BISE/meta-bio-net/Bionet_V2/"
source(paste(workdir,"Init.R",sep=""))
############  Installing dependencies #################
list.of.packages <- c("ggplot2", "hillR","entropy","econetwork","Rcpp","R6","data.tree","igraph","blockmodels","RNewsflow","reshape2","Rmisc","stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
############  Load libraries #################
library(R6)
library(data.tree)
library(igraph)
library(RNewsflow)
library(reshape2)
library(Rmisc)
library(dplyr)
library(stringr)
library(blockmodels)
library(econetwork)
library(entropy)
library(hillR)
library(ape)
library(ggplot2)
##### Source all needed files #####
source("Code/Data Structures/Taxon.R")
source("Code/Data Structures/Taxonomy.R")
source("Code/Data Structures/MetaWeb.R")
source("Code/Analysis/Util.R")
source("Code/Analysis/Alpha_metrics.R")
source("Applications/BISE/Workflow.R")
setwd("D:/Knowledge-based/BISE/meta-bio-net/Bionet_V2")
############  Installing dependencies #################
list.of.packages <- c("ggplot2", "hillR","entropy","econetwork","Rcpp","R6","data.tree","igraph","blockmodels","RNewsflow","reshape2","Rmisc","stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
############  Load libraries #################
library(R6)
library(data.tree)
library(igraph)
library(RNewsflow)
library(reshape2)
library(Rmisc)
library(dplyr)
library(stringr)
library(blockmodels)
library(econetwork)
library(entropy)
library(hillR)
library(ape)
library(ggplot2)
##### Source all needed files #####
source("Code/Data Structures/Taxon.R")
source("Code/Data Structures/Taxonomy.R")
source("Code/Data Structures/MetaWeb.R")
source("Code/Analysis/Util.R")
source("Code/Analysis/Alpha_metrics.R")
source("Applications/BISE/Workflow.R")
file_tg=paste(workdir,"Applications/MicroFoodWeb/Knowledge/tg.csv",sep="")
file_tg_fw=paste(workdir,"Applications/MicroFoodWeb/Knowledge/prior_tg_fw.csv",sep="")
file_taxo=paste(workdir,"Applications/MicroFoodWeb/Knowledge/taxonomy.csv",sep="")
file_occur=paste(workdir,"Applications/MicroFoodWeb/Data/occurence.csv",sep="")
file_abund=paste(workdir,"Applications/MicroFoodWeb/Data/abundance.csv",sep="")
file_design=paste(workdir,"Applications/MicroFoodWeb/Data/design.csv",sep="")
### Data structures
##Knowledge base: what columns to fetch
edge_ends_tg=c("resource_TG","consumer_TG")
edge_ends_taxa=c("key_resource","key_consumer")
edge_attributes=c("interaction_type","cooccur")
taxa_attributes=c("scientificName","trophicGroup","key","rank",
"kingdom","phylum","class","order","family")
### Level of organization of experimental setting ###
levels=c("Pot","Trt","Rep")
lev="Pot"
min_occur=1
verb=1
### Output files
outfile_metrics=paste(workdir,"Applications/MicroFoodWeb/Results/topometrics.csv",sep="")
outfile_beta=paste(workdir,"Applications/MicroFoodWeb/Results/beta_diversity",sep="")
outfile_fredund=paste(workdir,"Applications/MicroFoodWeb/Results/functional_redundancy.csv",sep="")
outfile_fdiv=paste(workdir,"Applications/MicroFoodWeb/Results/functional_diversity.csv",sep="")
taxo=read.csv2(file_taxo)
tg=read.csv2(file_tg)
tg_fw=read.csv2(file_tg_fw)
taxo_tg=merge(tg,taxo,by.x="scientificName",by.y="verbatimScientificName")[taxa_attributes]
rm(taxo)
rm(tg)
taxo_tg$surf=rep(1,dim(taxo_tg)[1])
taxo_tg$subsurf=rep(1,dim(taxo_tg)[1])
taxo_tg$soil=rep(1,dim(taxo_tg)[1])
taxo=read.csv2(file_taxo)
tg=read.csv2(file_tg)
tg_fw=read.csv2(file_tg_fw)
taxo_tg=merge(tg,taxo,by.x="scientificName",by.y="verbatimScientificName")[taxa_attributes]
rm(taxo)
rm(tg)
taxo_tg$surf=rep(1,dim(taxo_tg)[1])
taxo_tg$subsurf=rep(1,dim(taxo_tg)[1])
taxo_tg$soil=rep(1,dim(taxo_tg)[1])
consumers=merge(tg_fw,taxo_tg[c("scientificName","key","trophicGroup")],by.x="consumer_TG",by.y="trophicGroup")
taxa_fw=merge(consumers,taxo_tg[c("scientificName","key","trophicGroup")],by.x="resource_TG",by.y="trophicGroup",suffixes = c("_consumer","_resource"))
taxa_fw$cooccur<-rep(1,dim(taxa_fw)[1])
write.csv2(taxa_fw,"metafoodweb.csv")
rm(consumers)
taxa_metadata<-unique(taxo_tg[,-2])
taxa_nodes=apply(taxa_metadata,1, function(x){
microhab=list(surf=x["surf"],subsurf=x["subsurf"],soil=x["soil"])
node=Taxon$new(gbif_id=as.character(x['key']),
label = as.character(x['scientificName']),
broad=as.character(x['kingdom']),
rank=as.character(x['rank']),
microhab=microhab)
})
metaweb=MetaWeb$new(
mwebname="microfoodweb", taxa=taxa_nodes, edge_list=taxa_fw[,edge_ends_taxa],
edge_metadata=taxa_fw[,edge_attributes],res_name="key_resource",cons_name="key_consumer",type="interaction_type",cooccur="cooccur")
metaweb$print()
plot(metaweb$graph)
?plot
?plot.igraph
View(taxa_nodes)
plot(metaweb$graph,label='label')
g=metaweb$graph
g$vertices
vertices(g)
v=vertices(g)
V(g)
V(g)$attributes
V(game)$n
V(g)$name
V(g)$label
V(g)$gbuf_id
V(g)$gbif_id
o=V(g)
o=V(g)$scName
o
plot(metaweb$graph,label='scName')
plot(metaweb$graph,label=o)
tkplot(metaweb$graph, canvas.width = 450, canvas.height = 450)
o
plot(metaweb$graph,label=o)
plot(metaweb$graph,vertex.label=V(g)$scName)
plot(metaweb$graph,vertex.label=V(g)$scName,vertex.color=rainbow(10)[as.factor(V(g)$broad)])
plot(metaweb$graph,
vertex.label=V(g)$scName,
vertex.color=rainbow(10)[as.factor(V(g)$broad)],
plot.layout=layout_as_tree)
plot(metaweb$graph,
vertex.label=V(g)$scName,
vertex.color=rainbow(10)[as.factor(V(g)$broad)],
vertex.size=10,
plot.layout=layout_as_tree)
plot(metaweb$graph,
vertex.label=V(g)$scName,
vertex.color=rainbow(10)[as.factor(V(g)$broad)],
vertex.size=20,
plot.layout=layout_as_tree)
plot(metaweb$graph,
vertex.label=V(g)$scName,
vertex.color=rainbow(10)[as.factor(V(g)$broad)],
vertex.size=10,
plot.width=200,
plot.layout=layout_as_tree)
plot(metaweb$graph,
vertex.label=V(g)$scName,
vertex.color=rainbow(10)[as.factor(V(g)$broad)],
vertex.size=10,
plot.width=400,
plot.layout=layout_as_tree)
plot(metaweb$graph,
vertex.label=V(g)$scName,
vertex.color=rainbow(10)[as.factor(V(g)$broad)],
vertex.size=10,
plot.width=400,
plot.height=1000,
plot.layout=layout_as_tree)
plot(metaweb$graph,
vertex.label=V(g)$scName,
vertex.color=rainbow(10)[as.factor(V(g)$broad)],
vertex.size=10,
plot.layout=layout_as_tree)
legend(x=-1.5, y=-1.1)
plot(metaweb$graph,
vertex.label=V(g)$scName,
vertex.color=rainbow(10)[as.factor(V(g)$broad)],
vertex.size=10,rescale=FALSE,
plot.layout=layout_as_tree)
