fungis=get_energy_roots(net,attribute="broad",target_lists=broad_som,filter_attribute="broad",filter_values=broad_fungi)
bact_fungi_stats=energypathways_detail(net,y=bacterias,x=fungis,laby="bacterias",labx="fungis")
}
aggregate_occur=function(occur,cols,groups){
othercols=setdiff(colnames(occur),cols)
agg=data.frame(occur[,othercols])
colnames(agg)=othercols
new_names=unique(groups)
for(g in new_names){
c=names(which(groups==g))
agg[,g]<-rowSums(occur[,c])
}
return(list(df=agg,names=new_names))
}
troph_sbm<-function(metaweb,file_raw_adjacency,file,file_sbm_groups,file_sbm_adjacency,minim=5,ef=1.5,maxim=Inf){
### Clustering ###
#weighted_adj=data.frame(metaweb$get_adjacency_matrix("weight",F))
bin_adj=data.frame(get.adjacency(metaweb$graph,
attr=NULL, names=TRUE, sparse=FALSE))
nodelist=data.frame(keys=unlist(V(metaweb$graph)$name))
nodenames=data.frame(names=unlist(V(metaweb$graph)$scName))
# Saving #
#write.csv2(weighted_adj,file_raw_weighted_adjacency)
write.csv2(bin_adj,file_raw_adjacency)
sbm_model <- BM_bernoulli(
membership_type="SBM",
adj=as.matrix(bin_adj),
verbosity=6,
autosave='checkpoints_bin',
plotting=character(0),
exploration_factor=ef,
explore_min=minim,
explore_max=maxim,
ncores=detectCores())
sbm_model$estimate()
argmax=which.max(sbm_model$ICL)
### Number of clusters detected by SBM ###
cat("Number of clusters detected by SBM (maxICL) ",argmax)
### Getting SBM parameters for best estimated model ###
sbm_adj=sbm_model$model_parameters[[argmax]]$pi
sbm_mem=sbm_model$memberships[[argmax]]
sbm_mem$plot()
trophic_groups=data.frame(taxa_key=nodelist,taxa_names=nodenames,trophic_group=apply(sbm_mem$Z,1,which.max))
write.csv2(trophic_groups,file=file_sbm_groups)
write.csv2(sbm_adj,file_sbm_adjacency)
return(list(tg=trophic_groups,adj=sbm_adj))
}
betanet<-function(gList,groups=NULL,pt_names=NULL,div='P',file_beta="",eta){
if(is.null(groups)){
mw=V(getMetaweb(gList))$name
names(mw)=mw
}else{
mw=groups
}
a=disPairwise(gList, mw, type = div,eta = eta)
b <- matrix(0,length(gList),length(gList))
b[lower.tri(b, diag=FALSE)] <- a
b[upper.tri(b,diag=FALSE)]<-a
betadf=data.frame(b,row.names = pt_names)
colnames(betadf)=pt_names
write.csv2(betadf,file_beta)
return(betadf)
}
redund_fct<-function(agg_func_occur,pt_names,eta=c(0,1,2)){
out=lapply(as.list(eta), function(e){
hill=apply(agg_func_occur[,pt_names],2, function(x) hill_taxa(unlist(x),q = e))
return(hill)
})
names(out)=as.character(eta)
rf=data.frame(do.call(what = cbind,args = out))
colnames(rf)=as.character(eta)
return(rf)
}
#allrf=redund_fct(agg_occur,pt_names,eta=c(0,1,2))
#################### Plot functions ################################################
###PCOA
pcoa_plot=function(D,Y=NULL,corr="none"){
x=pcoa(D, correction=corr)
# S3 method for pcoa
biplot(x, Y)
return(x)
}
outfile_beta=paste(workdir,"Applications/MicroFoodWeb/beta_diversity.csv",sep="")
eta=0
betadivdf=betanet(gList=subnets,
file_beta = outfile_beta,pt_names = pt_names,div='P',eta=eta)
gList=subnets
gList=subnets
file_beta = outfile_beta
pt_names = pt_names
div='P'
eta=eta
groups=NULL
is.null(groups)
mw=V(getMetaweb(gList))$name
names(mw)=mw
a=disPairwise(gList, mw, type = div,eta = eta)
b <- matrix(0,length(gList),length(gList))
b[lower.tri(b, diag=FALSE)] <- a
b[upper.tri(b,diag=FALSE)]<-a
betadf=data.frame(b,row.names = pt_names)
View(b)
pt_names
betadivdf=betanet(gList=subnets,
file_beta = outfile_beta,pt_names = pt_names$Pot,div='P',eta=eta)
View(betadivdf)
paste(outfile_beta,eta,".csv")
paste(outfile_beta,eta,".csv",sep="")
outfile_beta=paste(workdir,"Applications/MicroFoodWeb/beta_diversity",sep="")
outfile_metrics=paste(workdir,"Applications/MicroFoodWeb/Results/topometrics.csv",sep="")
outfile_beta=paste(workdir,"Applications/MicroFoodWeb/Results/beta_diversity",sep="")
eta=c(0,1,2)
div=c('P','L')
for (d in div){
## Type of diversity assessed
for (e in eta){
## Hill number
betadivdf=betanet(gList=subnets,
file_beta = paste(outfile_beta,e,"_",d,".csv",sep=""),
pt_names = pt_names$Pot,div=d,eta=e)
}
}
View(taxo_tg)
View(taxo_tg)
View(taxo_tg)
func_redun=merge(taxo_tg,occur,by="key")
View(func_redun)
occur_tg=merge(taxo_tg,occur,by="key")
View(occur_tg)
pt_names[lev]
func_redund=aggregate(occur_tg[c(pt_names$Pot,"trophicGroup")])
occur_tg[c(pt_names$Pot,"trophicGroup")]
View(occur_tg)
c(pt_names$Pot,"trophicGroup")
View(occur_tg)
View(design)
design$Pot
c(design$Pot,"trophicGroup")
c("trophicGroup",design$Pot)
c(design$Pot)
c("trophicGroup",as.character(design$Pot))
occur_tg[c("trophicGroup",as.character(design$Pot))]
func_redund=aggregate(occur_tg[c("trophicGroup",as.character(design$Pot))],FUN = sum,by = "trophicGroup")
func_redund=aggregate(occur_tg[c("trophicGroup",as.character(design$Pot))],FUN = sum,by = c("trophicGroup"))
func_redund=aggregate(occur_tg[c("trophicGroup",as.character(design$Pot))],FUN = sum,by = list("trophicGroup"))
func_redund=aggregate(occur_tg[c("trophicGroup",as.character(design$Pot))],FUN = sum,by = list(occur_tg$trophicGroup))
View(occur_tg)
?aggregate
func_redund=aggregate(occur_tg[c("trophicGroup",as.character(design$Pot))],FUN = sum,by =list(occur_tg$trophicGroup))
o=occur_tg[c("trophicGroup",as.character(design$Pot))
View(o)
View(o)
o=occur_tg[,c("trophicGroup",as.character(design$Pot))]
View(o)
func_redund=aggregate(o=occur_tg[,c("trophicGroup",as.character(design$Pot))],FUN = sum,by =list(occur_tg$trophicGroup))
func_redund=aggregate(x=occur_tg[,c("trophicGroup",as.character(design$Pot))],FUN = sum,by =list(occur_tg$trophicGroup))
func_redund=aggregate(x=occur_tg[,c("trophicGroup",as.character(design$Pot))],FUN = sum)
func_redund=aggregate(x=occur_tg[,c("trophicGroup",as.character(design$Pot))],FUN = sum,by = list(TG=occur_tg$trophicGroup))
occur_tg[,as.character(design$Pot)]
cols=c("trophicGroup",as.character(design$Pot))
x=occur_tg[,cols]
View(x)
func_redund=aggregate(x=occur_tg[,cols],FUN = sum,by = list(TG=occur_tg$trophicGroup))
func_redund=aggregate(x=occur_tg[,as.character(design$Pot)],FUN = sum,by = list(TG=occur_tg$trophicGroup))
View(func_redund)
occur_tg=merge(taxo_tg,occur,by="key")
func_redund=aggregate(x=occur_tg[,as.character(design$Pot)],FUN = sum,by = list(TG=occur_tg$trophicGroup))
length(unique(taxo_tg$trophicGroup))
View(func_redund)
outfile_fredund=paste(workdir,"Applications/MicroFoodWeb/Results/functional_diversity.csv",sep="")
write.csv2(outfile_fredund)
write.csv2(outfile_fredund,func_redun)
write.csv2(func_redun,outfile_fredund)
write.csv2(func_redund,outfile_fredund)
?hill_taxa
as.character(pt_names)
as.character(design$Pot)
fct_div=redund_fct(func_redun,as.character(design$Pot),eta=0)
View(fct_div)
fct_div=list()
for (e in c(0,1,2))
fct_div[[e+1]]=redund_fct(func_redun,as.character(design$Pot),eta=e)
View(fct_div)
View(func_redun)
View(func_redund)
View(fct_div)
fct_div=cbind(fct_div)
View(fct_div)
fct_div=list()
for (e in c(0,1,2))
fct_div[[e+1]]=redund_fct(func_redun,as.character(design$Pot),eta=e)
fct_div_df=lapply(fct_div, cbind)
View(fct_div_df)
fct_div_df=do.call(fct_div, cbind)
fct_div_df=do.call(cbind,fct_div)
View(fct_div_df)
fct_div[[e+1]]=redund_fct(func_redun,as.character(design$Pot),eta=1)
e
View(fct_div)
View(fct_div_df)
View(func_redund)
fct_div=redund_fct(func_redun,as.character(design$Pot),eta=c(0,1,2))
View(fct_div)
fct_div=redund_fct(func_redun,as.character(design$Pot),eta=c(0,1,2))
View(fct_div)
fct_div=redund_fct(func_redun,as.character(design$Pot),eta=c(0,1))
View(fct_div)
agg_func_occur=fuc_redund
agg_func_occur=func_redund
e=2
hill=apply(agg_func_occur[,pt_names],2, function(x) hill_taxa(unlist(x),q = e))
pt_names
pt_names=pt_names$Pot
hill=apply(agg_func_occur[,pt_names],2, function(x) hill_taxa(unlist(x),q = e))
pt_names=as.character(pt_names$Pot)
pt_names=as.character(pt_names)
hill=apply(agg_func_occur[,pt_names],2, function(x) hill_taxa(unlist(x),q = e))
hill
fct_div=redund_fct(func_redun,as.character(design$Pot))
View(fct_div)
fct_div=redund_fct(func_redund,as.character(design$Pot))
View(fct_div)
View(func_redund)
rm(func_redun)
outfile_fredund=paste(workdir,"Applications/MicroFoodWeb/Results/functional_redundancy.csv",sep="")
outfile_fdiv=paste(workdir,"Applications/MicroFoodWeb/Results/functional_diversity.csv",sep="")
###Occurrence of groups
occur_tg=merge(taxo_tg,occur,by="key")
func_redund=aggregate(x=occur_tg[,as.character(design$Pot)],
FUN = sum,by = list(TG=occur_tg$trophicGroup))
write.csv2(func_redund,outfile_fredund)
fct_div=redund_fct(func_redund,as.character(design$Pot))
write.csv2(fct_div,outfile_fdiv)
broad_light=c("plant")
broad_som=c("SOM")
broad_fungi=c("Fungi")
broad_bacteria=c("Bacteria","Archaea")
att="broad"
scNames_opp=c()
scNames_min=c()
topoenerg_metrics=lapply(subnets,topoenergetic_metrics)
topoenerg_metrics[[length(topoenerg_metrics)+1]]=topoenergetic_metrics(metaweb$graph)
topometrics_df=do.call(rbind,lapply(topoenerg_metrics, as.data.frame))
topometrics_df$observation_id=c(pt_names$Pot,"metaweb")
topometrics_df$observation_id=c(design$Pot,"metaweb")
write.csv2(topometrics_df,outfile_metrics)
topometrics_df$observation_id=c(as.character(design$Pot),"metaweb")
write.csv2(topometrics_df,outfile_metrics)
library(ade4
)
data(aravo)
View(aravo)
pcoa_plot=function(betadivdf,Y=NULL,corr="none")
pcoa_plot(betadivdf,Y=NULL,corr="none")
pcoa_plot(as.dist(betadivdf),Y=NULL,corr="none")
?biplot
D=as.dist(betadivdf)
x=pcoa(D, correction=corr)
corr="none"
x=pcoa(D, correction=corr)
groups=pt_names
groups
g.plot <- ggbiplot(x, obs.scale=1, var.scale=1,
groups=groups, ellipse=TRUE)
# Add in color
g.plot <- g.plot+ scale_color_discrete(name='')
# add in legend
g.plot <- g.plot+ theme(legend.direction='horizontal',
legend.position='bottom')
g.plot
library(ggplot2)
g.plot <- ggbiplot(x, obs.scale=1, var.scale=1,
groups=groups, ellipse=TRUE)
# Add in color
g.plot <- g.plot+ scale_color_discrete(name='')
# add in legend
g.plot <- g.plot+ theme(legend.direction='horizontal',
legend.position='bottom')
g.plot
library(ggbiplot)
g.plot <- ggbiplot(x, obs.scale=1, var.scale=1,
groups=groups, ellipse=TRUE)
# Add in color
g.plot <- g.plot+ scale_color_discrete(name='')
# add in legend
g.plot <- g.plot+ theme(legend.direction='horizontal',
legend.position='bottom')
g.plot
View(x)
?ggbiplot
biplot(x, Y,col=groups)
Y=NULL
biplot(x, Y,col=groups)
biplot(x, Y,col=c(groups,NULL))
biplot(x, Y,col=c(groups,NULL),ggplot2=TRUE)
biplot.pcoa(D)
biplot.pcoa(x)
biplot.pcoa(x)
?biplot.pcoa
View(x)
biplot(x, Y,col=c(groups,"red"))
biplot(x, Y,col=c("red",groups))
View(x)
View(x)
groups=design$Trt
groups
groups=as.character(design$Trt)
groups
?biplot
length(unique(groups))
pal=palette(rainbow(length(unique(groups))))
biplot(x, Y,col=pal)
biplot(x, Y,col=c(pal))
?biplot
View(x)
biplot.pcoa(x, Y,col=c(pal))
pal
View(x)
biplot.pcoa(x$values, Y,col=c(pal))
pal
pal[groups]
biplot.pcoa(x, Y,col=pal)
plot(x$values,col=pal)
groups
pal[as.factor(groups)]
as.factor(groups)
pal[as.factor(groups)]
c(pal)
c(pal)[as.factor(groups)]
groups
as.factor(groups)
length(pal)
length(unique(groups))
pal=palette(rainbow(length(unique(groups))))
pal
col=c(pal)[as.factor(groups)]
col
biplot.pcoa(x, Y,col=col=c(pal)[as.factor(groups)])
biplot.pcoa(x, Y,col=c(pal)[as.factor(groups)])
View(x)
View(x)
pal=palette(rainbow(length(unique(groups))))
plot(x$vectors[,1],x$vectors[,2],col=c(pal)[as.factor(groups)])
row.names(D)
pt_names
ggploplot(x$vectors[,1],x$vectors[,2],col=c(pal)[as.factor(groups)],label = pt_names)
ggplot(x$vectors[,1],x$vectors[,2],col=c(pal)[as.factor(groups)],label = pt_names)
x=pcoa(D, correction=corr)$vectors[,1:2]
x=pcoa(D, correction=corr)
data=x$vectors[,1:2]
ev=x$values[1:2]
ev
ev=colMeans(x$values[1:2])
ev
View(x)
View(x)
View(data)
colnames(data)<-c("PC1","PC2")
ggplot(data,aes(x=PC1,y=PC2,col=c(pal)[as.factor(groups)],label = pt_names))
data=data.frame(x$vectors[,1:2])
colnames(data)<-c("PC1","PC2")
ggplot(data,aes(x=PC1,y=PC2,col=c(pal)[as.factor(groups)],label = pt_names))
PC1
ggplot(data,aes(x=data$PC1,y=data$PC2,col=c(pal)[as.factor(groups)],label = pt_names))
View(data)
View(data)
ggplot(data,aes(x=data$PC1,y=data$PC2,col=c(pal)[as.factor(groups)],label = row.names(data)))
ggplot(data,aes(x="PC1",y="PC2",col=c(pal)[as.factor(groups)],label = row.names(data)))
ggplot(data,aes(x=PC1,y=PC2,col=c(pal)[as.factor(groups)],label = row.names(data)))
c(pal)[as.factor(groups)]
data$group=groups
ggplot(data,aes(x=PC1,y=PC2,colour=group,label = row.names(data)))
View(data)
p<- ggplot(data,aes(x=PC1,y=PC2,colour=group,label = row.names(data)))
+ geom_point(size =5) +
scale_colour_manual(values = cbPalette[2:3]) +
geom_text(col = 'black')
p<- ggplot(data,aes(x=PC1,y=PC2,colour=group,label = row.names(data))) +
geom_point(size =5) +
scale_colour_manual(values = cbPalette[2:3]) +
geom_text(col = 'black')
p<- ggplot(data,aes(x=PC1,y=PC2,colour=group,label = row.names(data))) +
geom_point(size =5) +
geom_text(col = 'black')
p
pcoa_plot=function(D,Y=NULL,corr="none",groups=NULL,pt_names=NULL){
x=pcoa(D, correction=corr)
data=data.frame(x$vectors[,1:2])
colnames(data)<-c("PC1","PC2")
data$group=groups
p<- ggplot(data,aes(x=PC1,y=PC2,colour=group,label = row.names(data))) +
geom_point(size =5) +
geom_text(col = 'black')
return(list(pcoa=x,plot=p))
}
groups=as.character(design$Trt)
groups=as.character(design$Trt)
pcoa <- pcoa_plot(D=as.dist(betadivdf),Y=NULL,corr="none",groups=groups)
pcoa$plot
title(main=paste("Betadiversity :",d," eta= ",e))
pcoa$plot <- pcoa$plot + title(main=paste("Betadiversity :",d," eta= ",e))
pcoa$plot <- pcoa$plot +
ggtitle(paste("Betadiversity :",d," eta= ",e))
pcoa$plot
?betanet
names(labdiv)=div
eta=c(0,1,2)
div=c('P','L')
labdiv=c('Taxonomic','Link')
names(labdiv)=div
labdivd[d]
labdiv[d]
eta=c(0,1,2)
div=c('P','L')
labdiv=c('Taxonomic','Link')
names(labdiv)=div
groups=as.character(design$Trt)
for (d in div){
## Type of diversity assessed
for (e in eta){
## Hill number
betadivdf=betanet(gList=subnets,groups=
file_beta =
eta=c(0,1,2)
div=c('P','L')
labdiv=c('Taxonomic','Link')
names(labdiv)=div
groups=as.character(design$Trt)
for (d in div){
## Type of diversity assessed
for (e in eta){
## Hill number
betadivdf=betanet(gList=subnets,groups=NULL,
file_beta =
paste(outfile_beta,e,"_",d,".csv",sep=""),
pt_names = pt_names$Pot,div=d,eta=e)
pcoa=pcoa_plot(D=as.dist(betadivdf),Y=NULL,corr="none",groups=groups)
pcoa$plot <- pcoa$plot +
ggtitle(paste("Betadiversity :",labdiv[d],"turnover, Hill number= ",e))
pcoa$plot
}
}
pt_names=as.character(design[,lev])
pt_names
eta=c(0,1,2)
div=c('P','L')
labdiv=c('Taxonomic','Link')
names(labdiv)=div
groups=as.character(design$Trt)
for (d in div){
## Type of diversity assessed
for (e in eta){
## Hill number
betadivdf=betanet(gList=subnets,groups=NULL,
file_beta =
paste(outfile_beta,e,"_",d,".csv",sep=""),
pt_names = pt_names,div=d,eta=e)
pcoa=pcoa_plot(D=as.dist(betadivdf),Y=NULL,corr="none",groups=groups)
pcoa$plot <- pcoa$plot +
ggtitle(paste("Betadiversity :",labdiv[d],"turnover, Hill number= ",e))
pcoa$plot
}
}
paste("Betadiversity :",labdiv[d],"turnover, Hill number= ",e)
pcoa$plot <- pcoa$plot +
ggtitle(paste("Betadiversity :",labdiv[d],"turnover, Hill number= ",e))
pcoa$plot
pcoa_plot=function(D,Y=NULL,corr="none",groups=NULL,pt_names=NULL,title="PCoA"){
x=pcoa(D, correction=corr)
data=data.frame(x$vectors[,1:2])
colnames(data)<-c("PC1","PC2")
data$group=groups
p<- ggplot(data,aes(x=PC1,y=PC2,colour=group,label = row.names(data))) +
geom_point(size =5) +
geom_text(col = 'black') +
ggtitle(title)
return(list(pcoa=x,plot=p))
}
pcoa=pcoa_plot(D=as.dist(betadivdf),Y=NULL,corr="none",groups=groups,title=ggtitle(paste("Betadiversity :",labdiv[d],"turnover, Hill number= ",e))
pcoa$plot
pcoa=pcoa_plot(D=as.dist(betadivdf),Y=NULL,corr="none",groups=groups,title=paste("Betadiversity :",labdiv[d],"turnover, Hill number= ",e))
pcoa$plot
beta_list=list()
for (d in div){
## Type of diversity assessed
for (e in eta){
## Hill number
betadivdf=betanet(gList=subnets,groups=NULL,
file_beta =
paste(outfile_beta,e,"_",d,".csv",sep=""),
pt_names = pt_names,div=d,eta=e)
beta_list$d$e=betadivdf
}
}
View(beta_list)
beta_list[d][e]=betadivdf
beta_list[[d]][[e]]=betadivdf
View(beta_list)
beta_list=list()
for (d in div){
## Type of diversity assessed
for (e in eta){
## Hill number
betadivdf=betanet(gList=subnets,groups=NULL,
file_beta =
paste(outfile_beta,e,"_",d,".csv",sep=""),
pt_names = pt_names,div=d,eta=e)
beta_list[[d]][[e]]=betadivdf
}
}
(beta_list[d])[e]
(beta_list[d])[e]=betadivdf
