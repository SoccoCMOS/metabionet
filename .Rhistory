### Object functions ###
initialize = function(mwebname, taxa, edge_list, edge_metadata=NA) {
self$webname <- mwebname
self$nodes <- taxa
### Create empty graph ###
self$graph = graph.empty()%>%
### Add vertices ###
add_vertices(nv=length(taxa))%>%
### Add vertex attributes ###
set_vertex_attr("name",value=unlist(lapply(taxa,FUN=function(x) x$gbif_id)))%>%
set_vertex_attr("scName",value=unlist(lapply(taxa,FUN=function(x) x$label)))%>%
set_vertex_attr("rank",value=unlist(lapply(taxa,FUN=function(x) as.character(x$rank))))%>%
set_vertex_attr("broad",value=unlist(lapply(taxa,FUN=function(x) x$broadtype)))%>%
### Add edges and their attributes ###
add_edges(edges=as.vector(t(as.matrix(edge_list[,c("resource","consumer")]))),
attr = list(type=as.character(edge_metadata[,"type"]),weight=as.double(edge_metadata[,"cooccur"]))
)
},
print = function(){
cat("Metaweb: \n")
cat("  Name: ",self$webname, "\n", sep = "")
cat(" Network statistics: \n")
cat(" Number of taxa: ",igraph::vcount(self$graph),"\n", sep = "")
cat(" Number of interactions: ",igraph::ecount(self$graph),"\n", sep = "")
cat(" Connectivity: ",edge_density(self$graph))
invisible(self)
},
### Other functions needed ###
print_network = function(){  ##TODO: add graphical attributes
plot.igraph(graph,label="scName")
},
save_network = function(file_name,fmt= c("edgelist", "pajek", "ncol", "lgl",
"graphml", "dimacs", "gml", "dot", "leda")){
write_graph(graph=self$graph, file=file_name, format=fmt)
},
### Add attributes to vertices ###
add_vertex_atts=function(att_name,idx,atts){
self$graph=set_vertex_attr(graph=self$graph,name=att_name,index=idx,value=atts)
},
### Network projection functions => returns subnetwork of type igraph ###
project_metanetwork=function(sublist_taxa_keys,net_name,verbose=0){  ### Project to subset of taxa provided in a list of keys in string format
subnetwork=induced_subgraph(self$graph,vids=sublist_taxa_keys,impl="create_from_scratch")
if(verbose==1){
cat("Projected trophic web: \n")
cat("  Name: ",net_name, "\n", sep = "")
cat(" Network statistics: \n")
cat(" Number of taxa: ",vcount(subnetwork),"\n", sep = "")
cat(" Number of interactions: ",ecount(subnetwork),"\n", sep = "")
cat(" Connectivity: ",edge_density(subnetwork),"\n")
}
return(subnetwork)
},
get_taxa_broad=function(broad_list){ ### Returns list of taxa of a certain broad type
vbroad=V(self$graph)[broad%in%broad_list]
return(vbroad)
},
get_taxa_rank=function(ranks){ ### Filter taxa of certain rank (provide ranks to keep)
vrank=V(self$graph)[rank%in%ranks]
return(vrank)
},
get_interactions_type=function(typ=c("eats","parasiteOf")){ ### Filter to a certain type of interactions
etype=E(self$graph)[type%in%typ]
return(etype)
},
get_interactions_strength=function(th=0){ ### Filter to a certain type of interactions
estrength=E(self$graph)[weight>th]
return(estrength)
},
subgraph_edges=function(eids,delete_taxa=F){
return(subgraph.edges(self$graph, eids, delete.vertices = delete_taxa))
},
get_adjacency_matrix=function(edge_att="weight",edges=T){
return(as_adjacency_matrix(self$graph,attr = edge_att,edges = edges,sparse = F))
}
))
############  General workflow of analysis from occurrence file and metaweb #################
meta_bionet_workflow<-function(sub_edges=NA,agg_occur=NA,taxa_metadata=NA,
name="PROJECT",pt_names=NA,rank_filter=c("FAMILY","GENUS","SPECIES","RESOURCE"),
edge_ends=c("resource","consumer"),edge_attributes=c("type","cooccur"),
weight_att=0,type_att=0,min_prob=0.4,min_occur=1,
verb=1){
cat("Creating node objects for the covered ",dim(taxa_metadata)[1]," taxa \n")
### Create node objects for each motu with metadata (rank, microhabitat) from knoweldge base ###
taxa_nodes=apply(taxa_metadata,1, function(x){
microhab=list(surf=x["surf"],subsurf=x["subsurf"],soil=x["soil"])
node=Taxon$new(gbif_id=as.character(x['key']),
label = as.character(x['verbatimScientificName']),
broad=as.character(x['broad']),
rank=as.character(x['rank']),
microhab=microhab)
})
#### Select interactions with probability of co-occurrence higher than threshold ####
if(weight_att>0){
sel_edges=subset(sub_edges,sub_edges[edge_attributes[weight_att]]>=min_prob)
}else{
sel_edges=sub_edges
}
cat("Creating metaweb of trophic/parasitic interactions \n")
metaweb=MetaWeb$new(mwebname=name, taxa=taxa_nodes, edge_list=sel_edges[,edge_ends], edge_metadata=sel_edges[,edge_attributes])
metaweb$print()
cat("Rank filter \n")
unsupported_ranks=setdiff(unique(taxa_metadata$rank),rank_filter)
sel_vertices=metaweb$get_taxa_rank(ranks=rank_filter)
del_vertices=metaweb$get_taxa_rank(ranks=unsupported_ranks)
metaweb$graph=delete.vertices(graph = metaweb$graph,del_vertices)
sel_occur=agg_occur[agg_occur$key%in%sel_vertices$name,]
cat("Projecting metaweb to local occurrence data, with minimum significant occurrence = ",min_occur,"\n")
subnets=lapply(pt_names, function(x){
community_compos=as.character(sel_occur[which(sel_occur[,x]>=min_occur),"key"])
subnetwork=metaweb$project_metanetwork(sublist_taxa_keys = community_compos,net_name = x,verbose=verb)
return(subnetwork)
})
cat("Computing and saving network topology and energy pathways metrics \n")
topoenerg_metrics=lapply(subnets,topoenergetic_metrics)
topometrics_df=do.call(rbind,lapply(topoenerg_metrics, as.data.frame))
topometrics_df$observation_id=pt_names
return(list(Metaweb=metaweb,SubNetworks=subnets,TopoEnMetrics=topometrics_df))
}
############  Analysis of shared backbone accross observation points #################
shared_backbone_analysis<-function(occur_df,exp,levels,id_col,taxa_cols,cov_th=0.8){
##occur_dataframe: dataframe with occurrence data in the most precise scale
##exp: dataframe with first column as id of the most precise observations
##levels: columns from exp to consider in a hierarchical order (coarsest to most precise)
##id_col: name of column with ids of observations in exp
##taxa_cols: names of columns in occur_df that contain taxa information
##cov_th: coverage threshold in % at what coverage percentage do we consider the taxa as omnipresent
coverage=list()
coverage$keys=occur_df$key
for (lev in 0:3){
cols=levels[1:(1+lev)]
### Aggregate occurences ###
if(length(cols)==1){
by=list(exp[,c(cols)])
}else{
by=as.list(exp[,c(cols)])
}
groups=aggregate(exp,by=by,FUN = list)[,c(id_col,cols)]
groups$group_id=1:dim(groups)[1]
group_occur=data.frame(apply(groups,1,function(x){
#print(x)
range=as.vector(x[[1]])
#print(range)
if(length(range)>1){
rowSums(occur_df[,range])
}else{
occur_df[,range]
}
}))
new_cols=lapply(groups$group_id,function(x) paste("G_",x,sep=""))
colnames(group_occur)=new_cols
group_occur[,taxa_cols]=occur_df[,taxa_cols]
#cat("Common backbone of taxa shared accross observation points at ",levels[lev+1]," scale \n")
taxa_coverage=rowSums(group_occur[,unlist(new_cols)]>0)/length(new_cols)
backbone=group_occur[which(taxa_coverage>=cov_th),taxa_cols]
coverage[levels[lev+1]]<-list(backbone)
}
return(coverage)
}
############################ Betadiversity metrics computation ###################################
workdir="D:/Knowledge-based/BISE/meta-bio-net/Bionet_V2/"
source(paste(workdir,"Init.R",sep=""))
source(paste(workdir,"Init.R",sep=""))
file_kwBase=paste(workdir,"Knowledge/KB.csv",sep="")
file_occurBase=paste(workdir,"Data/normalized_metabar_out.csv",sep="")
experimental_setting=paste(workdir,"Data/experimental_setting.csv",sep="")
file_raw_adjacency=paste(workdir,"Applications/BISE/out/metaweb_adj/bin_adjacency.csv",sep="")
file_raw_weighted_adjacency=paste(workdir,"Applications/BISE/out/metaweb_adj/weighted_adjacency.csv",sep="")
file_sbm_groups=paste(workdir,"Applications/BISE/out/sbmmetaweb_adj/trophic_groups_memberships.csv",sep="")
file_sbm_adjacency=paste(workdir,"Applications/BISE/out/sbmmetaweb_adj/trophic_groups_adjacency.csv",sep="")
### Data structures
##Knowledge base: what columns to fetch
kb_resource_metadata=c("resource","resource_name","resource_rank","res_surf","res_subsurf","res_soil")
kb_consumer_metadata=c("consumer","consumer_name","consumer_rank","cons_surf","cons_subsurf","cons_soil")
taxa_metadata_colnames=c("key","name","rank","surf","subsurf","soil")
edge_ends=c("resource","consumer")
edge_attributes=c("type","cooccur")
### Level of organization of experimental setting ###
levels=c("Site","Parcelle","Echantillon","Repet")
##Metabar output
###what columns define taxa information
metabar_taxa_metadata=c("key","verbatimScientificName","broad")
###what columns contain occurrence data
sample_ids=function(x){
return(colnames(x)[grep("BISE_*",colnames(x))])
}
### Thresholds
min_prob=0.1  ###Minimum probability of co-occurrence (habitat sharing) to accept interaction
min_occur=1 ###Minimum occurrence count to consider actual presence
sbm_done=1
beta_done=1
betapt_done=0
sbmbetapt_done=0
### Output files
### Saving ###
file_alphametrics_taxa=paste(workdir,"Applications/BISE/out/taxa_topo_energetics_metrics.csv",sep="")
file_alphametrics_groups=paste(workdir,"Applications/BISE/out/groups_topo_energetics_metrics.csv",sep="")
file_alltaxa_rds=paste(workdir,"Applications/BISE/out/taxa_analysis.rds",sep="")
file_beta=paste(workdir,"Applications/BISE/out/beta/betadiv.csv",sep="")
file_beta_pt=paste(workdir,"Applications/BISE/out/beta/betadiv_pt_",sep="")
file_sbmbeta_pt=paste(workdir,"Applications/BISE/out/beta/sbmbetadiv_pt.csv",sep="")
file_redund_fct=paste(workdir,"Applications/BISE/out/func_redund/redund_fct.csv",sep="")
file_agg_func_occur=paste(workdir,"Applications/BISE/out/func_redund/occur_fct.csv",sep="")
### Knowledge base ###
edge_kb= read.csv2(file_kwBase,dec=".")
cat("Knowledge base contains: ",dim(edge_kb)[1],"edges \n",sep=" ")
### Taxa related knowledge ###
#edge_kb$resource_rank%in%c("FAMILY","GENUS","SPECIES","RESOURCE")
resource_metadata=unique(edge_kb[,kb_resource_metadata])
consumer_metadata=unique(edge_kb[,kb_consumer_metadata])
colnames(resource_metadata)=colnames(consumer_metadata)=taxa_metadata_colnames
taxa_kb=unique(rbind(resource_metadata,consumer_metadata))
## Delete unused data ##
rm(resource_metadata)
rm(consumer_metadata)
cat("Knowledge base covers: ",dim(taxa_kb)[1],"taxa \n",sep=" ")
#summary(taxa_metadata)
### MOTU occurrence dataset ###
raw_metabar=read.csv2(file_occurBase)
### Occurrence columns ###
pt_names=sample_ids(raw_metabar)
metabar=subset(raw_metabar,rowSums(raw_metabar[,pt_names])>0)
cat("MOTU dataset contains: ",dim(metabar)[1],"motus \n",sep=" ")
rm(raw_metabar)
fac<-read.csv2(experimental_setting)
### Knowledge base ###
edge_kb= read.csv2(file_kwBase,dec=".")
cat("Knowledge base contains: ",dim(edge_kb)[1],"edges \n",sep=" ")
### Taxa related knowledge ###
#edge_kb$resource_rank%in%c("FAMILY","GENUS","SPECIES","RESOURCE")
resource_metadata=unique(edge_kb[,kb_resource_metadata])
consumer_metadata=unique(edge_kb[,kb_consumer_metadata])
colnames(resource_metadata)=colnames(consumer_metadata)=taxa_metadata_colnames
taxa_kb=unique(rbind(resource_metadata,consumer_metadata))
## Delete unused data ##
rm(resource_metadata)
rm(consumer_metadata)
cat("Knowledge base covers: ",dim(taxa_kb)[1],"taxa \n",sep=" ")
#summary(taxa_metadata)
### MOTU occurrence dataset ###
raw_metabar=read.csv2(file_occurBase)
### Occurrence columns ###
pt_names=sample_ids(raw_metabar)
metabar=subset(raw_metabar,rowSums(raw_metabar[,pt_names])>0)
cat("MOTU dataset contains: ",dim(metabar)[1],"motus \n",sep=" ")
rm(raw_metabar)
fac<-read.csv2(experimental_setting)
### Filtering MOTUs not covered in knowledge base  ###
list_keys=unique(metabar[,metabar_taxa_metadata])
motu_uncovered=subset(list_keys,!(key %in% edge_kb$resource) & !(key%in% edge_kb$consumer))
motu_covered=subset(list_keys,key %in% edge_kb$resource | key%in% edge_kb$consumer)
cat("MOTU coverage in knowledge base: ",100*dim(motu_covered)[1]/dim(list_keys)[1],"%\n")
rm(list_keys)
rm(motu_uncovered)
taxa_metadata=merge(motu_covered,taxa_kb,by="key")
#taxa_metadata=subset(o,rank%in%c("FAMILY","GENUS","SPECIES","RESOURCE"))
rm(motu_covered)
rm(taxa_kb)
sub_edges=subset(edge_kb,edge_kb$resource%in%taxa_metadata$key & edge_kb$consumer%in%taxa_metadata$key)
cat("Covered taxa in knowledge base are involved in ",dim(sub_edges)[1]," known interactions with proportions of trophic and parasitism of respectively: \n",100*(summary(sub_edges[,c("type")])/dim(sub_edges)[1]))
rm(edge_kb)
### Aggregating MOTU data to the occurrence point ###
cat("Selecting occurrences of covered taxa in the knowledge base \n")
submetabar=metabar[metabar$key %in%taxa_metadata$key,c("key",pt_names)]
rm(metabar)
agg_occur=aggregate(submetabar[,pt_names],
by=list(
key=submetabar$key),
#verbatimScientificName=submetabar$verbatimScientificName,
#broad=submetabar$broad),
FUN=sum)
rm(submetabar)
alltaxa_analysis=meta_bionet_workflow(sub_edges,agg_occur,taxa_metadata,
name="BISE",pt_names=pt_names,
rank_filter=c("FAMILY","GENUS","SPECIES","RESOURCE"),
edge_ends=edge_ends,edge_attributes=edge_attributes,
weight_att=2,type_att=1,min_prob=min_prob,min_occur=min_occur,
verb=0)
saveRDS(alltaxa_analysis,file = file_alltaxa_rds)
### Saving statistics ###
write.csv2(cbind(fac,alltaxa_analysis$TopoEnMetrics),file=file_alphametrics_taxa,row.names = F)
View(alltaxa_analysis)
o=alltaxa_analysis$TopoEnMetrics
View(o)
beta_done=
0
lnames=unlist(lapply(1:64, function(x) sprintf("BISE_%02d",x)))
lgroups=rep(lnames,each=4)
names(lgroups)=pt_names
agg_occur_pt<-aggregate_occur(agg_occur,pt_names,lgroups)
pointlevel_analysis=meta_bionet_workflow(sub_edges,agg_occur_pt$df,taxa_metadata,
name="BISE_PT",agg_occur_pt$names,
edge_ends,edge_attributes,
weight_att=2,type_att=1,min_prob=min_prob,min_occur=min_occur,
verb=0)
View(sub_edges)
edge_ends
View(agg_occur_pt)
min_prob
min_prob=0
pointlevel_analysis=meta_bionet_workflow(sub_edges,agg_occur_pt$df,taxa_metadata,
name="BISE_PT",agg_occur_pt$names,
edge_ends,edge_attributes,
weight_att=2,type_att=1,min_prob=min_prob,min_occur=min_occur,
verb=0)
View(sub_edges)
pointlevel_analysis=meta_bionet_workflow(sub_edges,agg_occur_pt$df,taxa_metadata,
name="BISE_PT",pt_names=lnames,
rank_filter=c("FAMILY","GENUS","SPECIES","RESOURCE"),
edge_ends=edge_ends,edge_attributes=edge_attributes,
weight_att=2,type_att=1,min_prob=min_prob,min_occur=min_occur,
verb=0)
View(pointlevel_analysis)
betapt_done
eta=c(0,1,2)
divs=c('P','L')
if(betapt_done==0){
for (div in divs){
for (e in eta){
betadiv_ptdf=betanet(gList=pointlevel_analysis$SubNetworks,
file_beta = paste(file_beta_pt,"_",e,"_",div,".csv",sep=""),
pt_names = lnames,div=div,eta=e)
}
}
betapt_done=1
}else{
betadiv_ptdf=read.csv2(file_beta_pt,row.names = 1)
}
unlink('Applications/BISE/NoteBook_cache', recursive = TRUE)
############### Set of utility functions to help compute metrics on food webs #################
util_haslinkto<-function(net,targets,dir=c("in","out")){  ###returns lists of taxa labels that are connected to targets => example here targets are all groups of resources
###net: igraph object representing the network of interactions
###targets: nodes from where to start energy pathways
###direction of energy: in (they consume) or out (they are consumed)
vtargets=V(net)[name %in% targets]
l=list()
for (v in targets){
l=append(l,neighbors(net,v,dir)$name)
}
return(unlist(l))
}
containsAttr<-function(xset,yset){
#print("New")
#print(x)
#print(y)
return(length(intersect(xset,yset))>0)
}
get_energy_roots<-function(net,attribute=c("broad","scName"),target_lists,filter_attribute=c("broad","scName"),filter_values){
###net: igraph object representing the network of interactions
###attribute: node attribute from which we subset
###target_lists: attribute values to subset
#vertex_attr(net, attribute)%in%target_lists
vroots=V(net)[
unlist(lapply(vertex_attr(net, attribute),function(x) containsAttr(x,target_lists)))
#vertex_attr(net, attribute)%in%target_lists
]
haslinktovroots=unique(util_haslinkto(net,vroots,"out"))
if(length(filter_values)>0){
cond1=unlist(lapply(vertex_attr(net, filter_attribute),function(x) containsAttr(x,filter_values)))
cond2=vertex_attr(net, "name")%in%haslinktovroots
starters=V(net)[cond1 & cond2]
}else{
starters=V(net)[name %in% haslinktovroots]
}
return(starters)
}
pathways_stat<-function(net,node_sources){
### Computes pathways statistics =>
#net: igraph object
## node_sources: output of get_energy_roots
if(vcount(net)==0){
print("Warning empty or disconnected network")
brg_stat=list(sum_pathsize=0,mean_pathsize=0,median_pathsize=0,sd_pathsize=0,covered_taxa=NULL,nbcovered_taxa=0)
}
else{
deb <<- net
sums=vector(mode="numeric",length=length(node_sources))
moys=vector(mode="numeric",length=length(node_sources))
meds=vector(mode="numeric",length=length(node_sources))
sds=vector(mode="numeric",length=length(node_sources))
maxs=vector(mode="numeric",length=length(node_sources))
ncov=vector(mode="character")
cpt=0
for (root in node_sources){
cpt=cpt+1
d=bfs(net, root, neimode = c("out"),
unreachable = FALSE, restricted = NULL, order = TRUE, rank = FALSE,
father = FALSE, pred = FALSE, succ = FALSE, dist = TRUE,
callback = NULL, extra = NULL, rho = parent.frame())
roads=d$dist[which(!is.na(d$dist))]
sums[cpt]=sum(roads)
moys[cpt]=mean(roads)
meds[cpt]=median(roads)
sds[cpt]=sd(roads)
maxs[cpt]=max(roads)
ncov=union(ncov,names(which(!is.na(d$dist))))
}
nbcov=length(ncov)
brg_stat=list(sum_pathsize=sum(sums),mean_pathsize=mean(moys),median_pathsize=median(meds),sd_pathsize=sd(sds),covered_taxa=ncov,nbcovered_taxa=nbcov,max_dist=max(maxs))
}
return(brg_stat)
}
ratio<-function(a,b){
if(is.na(a) || is.na(b)){
rat=0
}
else{
if(b==0){
rat=0
}
else{
rat=a/b
}
}
}
energypathways_detail <- function(net,x,y,labx="x",laby="y"){   ### Analysis of a single network
X=pathways_stat(net,x)
Y=pathways_stat(net,y)
### X/Y statistics
XF=data.frame(source=labx,sum=X$sum_pathsize, med=X$median_pathsize,mean=X$mean_pathsize,sd=X$sd_pathsize,nbcovered=X$nbcovered_taxa)
YF=data.frame(source=laby,sum=Y$sum_pathsize, med=Y$median_pathsize,mean=Y$mean_pathsize,sd=Y$sd_pathsize,nbcovered=Y$nbcovered_taxa)
comb=data.frame(source=paste(labx,laby,sep="/"),sum=ratio(X$sum_pathsize,Y$sum_pathsize), med=ratio(X$median_pathsize,Y$median_pathsize),mean=ratio(X$mean_pathsize,Y$mean_pathsize),sd=ratio(X$sd_pathsize,Y$sd_pathsize),nbcovered=ratio(X$nbcovered_taxa,Y$nbcovered_taxa))
out=list(X=XF,Y=YF,RatioXY=comb)
return(out)
}
energy_pathways_ut=function(){
phototrophs=get_energy_roots(net,attribute="broad",target_lists=broad_light,filter_attribute="",filter_values=c())
decomposers=get_energy_roots(net,attribute="broad",target_lists=broad_som,filter_attribute="",filter_values=c())
brown_green_stats=energypathways_detail(net,y=phototrophs,x=decomposers,laby="green",labx="brown")
bacterias=get_energy_roots(net,attribute="broad",target_lists=broad_som,filter_attribute="broad",filter_values=broad_bacteria)
fungis=get_energy_roots(net,attribute="broad",target_lists=broad_som,filter_attribute="broad",filter_values=broad_fungi)
bact_fungi_stats=energypathways_detail(net,y=bacterias,x=fungis,laby="bacterias",labx="fungis")
}
aggregate_occur=function(occur,cols,groups){
othercols=setdiff(colnames(occur),cols)
agg=data.frame(occur[,othercols])
colnames(agg)=othercols
new_names=unique(groups)
for(g in new_names){
c=names(which(groups==g))
agg[,g]<-rowSums(occur[,c])
}
return(list(df=agg,names=new_names))
}
troph_sbm<-function(metaweb,file_raw_adjacency,file,file_sbm_groups,file_sbm_adjacency,minim=5,ef=1.5,maxim=Inf){
### Clustering ###
#weighted_adj=data.frame(metaweb$get_adjacency_matrix("weight",F))
bin_adj=data.frame(get.adjacency(metaweb$graph,
attr=NULL, names=TRUE, sparse=FALSE))
nodelist=data.frame(keys=unlist(V(metaweb$graph)$name))
nodenames=data.frame(names=unlist(V(metaweb$graph)$scName))
# Saving #
#write.csv2(weighted_adj,file_raw_weighted_adjacency)
write.csv2(bin_adj,file_raw_adjacency)
sbm_model <- BM_bernoulli(
membership_type="SBM",
adj=as.matrix(bin_adj),
verbosity=6,
autosave='checkpoints_bin',
plotting=character(0),
exploration_factor=ef,
explore_min=minim,
explore_max=maxim,
ncores=detectCores())
sbm_model$estimate()
argmax=which.max(sbm_model$ICL)
### Number of clusters detected by SBM ###
cat("Number of clusters detected by SBM (maxICL) ",argmax)
### Getting SBM parameters for best estimated model ###
sbm_adj=sbm_model$model_parameters[[argmax]]$pi
sbm_mem=sbm_model$memberships[[argmax]]
sbm_mem$plot()
trophic_groups=data.frame(taxa_key=nodelist,taxa_names=nodenames,trophic_group=apply(sbm_mem$Z,1,which.max))
write.csv2(trophic_groups,file=file_sbm_groups)
write.csv2(sbm_adj,file_sbm_adjacency)
return(list(tg=trophic_groups,adj=sbm_adj))
}
betanet<-function(gList,groups=NULL,pt_names=NULL,div='P',file_beta="",eta){
if(is.null(groups)){
mw=V(getMetaweb(gList))$name
names(mw)=mw
}else{
mw=groups
}
a=disPairwise(gList, mw, type = div,eta = eta)
b <- matrix(0,length(gList),length(gList))
b[lower.tri(b, diag=FALSE)] <- a
b[upper.tri(b,diag=FALSE)]<-a
betadf=data.frame(b,row.names = pt_names)
colnames(betadf)=pt_names
write.csv2(betadf,file_beta)
return(betadf)
}
redund_fct<-function(agg_func_occur,pt_names,eta=c(0,1,2)){
out=lapply(as.list(eta), function(e){
hill=apply(agg_func_occur[,pt_names],2, function(x) hill_taxa(unlist(x),q = e))
return(hill)
})
names(out)=as.character(eta)
rf=data.frame(do.call(what = cbind,args = out))
colnames(rf)=as.character(eta)
return(rf)
}
#allrf=redund_fct(agg_occur,pt_names,eta=c(0,1,2))
#################### Plot functions ################################################
###PCOA
pcoa_plot=function(D,Y=NULL,corr="none"){
x=pcoa(D, correction=corr)
# S3 method for pcoa
biplot(x, Y)
return(x)
}
file_beta_pt
